@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.Badge
@using System.IO
@inject IJSRuntime JS
@inject IndexedDB.Blazor.IIndexedDbFactory DbFactory

@if (Badges != null && Badges.Any())
{
    <p class="mb-1">
        @foreach (var badge in Badges)
        {
            if (badge.Name.Contains("SRPA"))
            {
                <span @onclick="() => DownloadFormInscription(Farm?.Id ?? 0)" class="badge badge-round bg-@badge.Category text-white p-1 mr-1" title="@badge.Title">@badge.Name</span>             
            }
            else
            {
                <span class="badge badge-round bg-@badge.Category text-white p-1 mr-1" title="@badge.Title">@badge.Name</span>
            }
        }
    </p>
}

@code
{
    [Parameter]
    public IBadge[] Badges { get; set; }

    [Parameter]
    public Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.Farm.Farm Farm { get; set; }

    async Task DownloadFormInscription(int farmId)
    {
        using (var db = await this.DbFactory.Create<Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb.FormInscriptionDb>())
        {
            var file = db.FormInscriptions
                                .Where(x => x.FarmId == farmId)
                                .SingleOrDefault();
            if(file != null && Farm != null)
                Download(JS, file.FileData, file.FileType, $"formulaire-inscriptions-{Farm.Ktidb}.pdf");
        }
    }

    private static void Download(IJSRuntime jsRuntime, byte[] byteData, string mimeType, string fileName)
    {
        if (byteData == null)
        {
            jsRuntime.InvokeVoidAsync("alert", "The byte array provided for Exporting was Null.");
        }
        else
        {
            jsRuntime.InvokeVoidAsync("downloadFromByteArray", byteData, fileName, mimeType);
        }
    }
}
