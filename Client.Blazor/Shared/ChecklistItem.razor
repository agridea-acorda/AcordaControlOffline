@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.Combo
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection
@using System.Text.Json
@using System.Text.Json.Serialization
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.Pages
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Unit
@using Blazorise
@using IndexedDB.Blazor
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb.ViewModel
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb

@inject IJSRuntime Js
@inject IIndexedDbFactory DbFactory

<div id="@Node.Id" class="list-group-item @displayCssClass @autosetCssClass">
    @if (Node.NumPoints > 0 || Node.NumGroups > 0)
    {
        <a @onclick="@(() => OnNodeViewChanged.InvokeAsync(Node.ConjunctElementCode))"><i class="fas fa-chevron-right fa-3x float-left rotate mr-2"></i></a>
    }
    <span class="badge badge-outline text-indigo bg-indigo disabled float-right mr-1">@Node.NumPoints</span>
    <span class="badge badge-outline text-indigo disabled float-right mr-1">@Node.NumGroups</span>

    @if (!string.IsNullOrEmpty(Node.InspectorComment) || !string.IsNullOrEmpty(Node.FarmerComment) || (Node.DefectId != null && Node.DefectId != 0))
    {
        <span class="badge badge-outline text-black @Node.Outcome.OutcomeCssClass(Node.Outcome) disabled float-right mr-1"><i class="far fa-comment-dots"></i></span>
    }

    <h4 class="list-group-item-heading">@Node.ShortName</h4>
    <p class="list-group-item-text mb-2">@Node.ConjunctElementCode</p>
    <button disabled="@Node.HasChildren" class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.Ok)" @onclick="() => SetOutcome(InspectionOutcome.Ok)"><i class="far fa-thumbs-up"></i></button>
    <button disabled="@Node.HasChildren" class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.PartiallyOk)" @onclick="() => SetOutcome(InspectionOutcome.PartiallyOk)">P</button>
    <button disabled="@Node.HasChildren" class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.NotOk)" @onclick="() => SetOutcome(InspectionOutcome.NotOk)"><i class="far fa-thumbs-down"></i></button>
    <button class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.NotInspected)" @onclick="() => SetOutcome(InspectionOutcome.NotInspected)">NC</button>
    <button class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.NotApplicable)" @onclick="() => SetOutcome(InspectionOutcome.NotApplicable)">NA</button>
    @if (Node.Outcome != InspectionOutcome.Unset)
    {
        <button @onclick="@Edit_Clicked" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default">...</button>
        <button @onclick="@Delete_Clicked" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default"><i class="far fa-trash-alt"></i></button>
    }
    @if (!string.IsNullOrWhiteSpace(Node.Name))
    {
        <button @onclick="@Info_Clicked" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default float-right"><i class="fas fa-info"></i></button>
    }
</div>

@code
{
    [Parameter] public Checklist2.ResultModel Node { get; set; }
    [Parameter] public bool ShowIfAutoSet { get; set; }
    [Parameter] public List<FileChecklist> Files { get; set; }
    [Parameter] public EventCallback<string> OnNodeViewChanged { get; set; }
    [Parameter] public EventCallback<string> OnEditing { get; set; }
    [Parameter] public EventCallback<Checklist2.ResultModel> OnOutcomeChanged { get; set; }
    [Parameter] public EventCallback<string> OnDeleting { get; set; }
    [Parameter] public EventCallback<string> OnDisplayingInfo { get; set; }
    [Parameter] public int FarmInspectionId { get; set; }
    string displayCssClass => Node.IsAutoSet && !ShowIfAutoSet ? "d-none" : "";
    string autosetCssClass => Node.IsAutoSet ? "striped" : "";
   
    async Task SetOutcome(InspectionOutcome outcome)
    {
        var previousOutcome = Node.Outcome;
        Node.Outcome = outcome;
        if (previousOutcome != outcome)
            Node.IsAutoSet = false;
        await OnOutcomeChanged.InvokeAsync(Node);
    }

    async Task Edit_Clicked()
    {
        await OnEditing.InvokeAsync(Node.ConjunctElementCode);
    }

    async Task Delete_Clicked()
    {
        await OnDeleting.InvokeAsync(Node.ConjunctElementCode);
    }

    async Task Info_Clicked()
    {
        await OnDisplayingInfo.InvokeAsync(Node.ConjunctElementCode);
    }

    //async Task OnEdited()
    //{
    //    edit.Hide();
    //    Node.IsAutoSet = false; // simplistic approach: always clear IsAutoSet when Node is edited (we don't check if anything changed)
    //    await OnEditing.InvokeAsync(Node);
    //}

    //void OnEditOk()
    //{
    //    Validate();
    //}

    //void OnEditCancelled()
    //{
    //    Validate();
    //}

    //private void Validate()
    //{
    //    if (validations.ValidateAll())
    //    {
    //        edit.Hide();
    //    }
    //    else
    //    {
    //        Node.DefectDescription = null;
    //    }
    //}

    //public void ValidateDefectDescription(ValidatorEventArgs e)
    //{
    //    e.Status = Node.DefectId != null &&
    //               Node.DefectId != 0 &&
    //               !string.IsNullOrEmpty(Node.DefectDescription)
    //        ? ValidationStatus.Error
    //        : ValidationStatus.None;
    //}
}
