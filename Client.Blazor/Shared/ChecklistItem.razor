@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.Combo
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection
@using System.Text.Json
@using System.Text.Json.Serialization
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Unit
@using Blazorise

@inject IJSRuntime Js

<div id="@Node.Id" class="list-group-item @displayCssClass @autosetCssClass">
    @if (Node.NumPoints > 0 || Node.NumGroups > 0)
    {
        <a @onclick="@(() => OnNodeViewChanged.InvokeAsync(Node.ConjunctElementCode))"><i class="fas fa-chevron-right fa-3x float-left rotate mr-2"></i></a>
    }
    <span class="badge badge-outline text-indigo bg-indigo disabled float-right mr-1">@Node.NumPoints</span>
    <span class="badge badge-outline text-indigo disabled float-right mr-1">@Node.NumGroups</span>

    @if (!string.IsNullOrEmpty(Node.InspectorComment) || !string.IsNullOrEmpty(Node.FarmerComment) || (Node.DefectId != null && Node.DefectId != 0))
    {
        <span class="badge badge-outline text-black @Node.Outcome.OutcomeCssClass(Node.Outcome) disabled float-right mr-1"><i class="far fa-comment-dots"></i></span>
    }
    
    <h4 class="list-group-item-heading">@Node.ShortName</h4>
    <p class="list-group-item-text mb-2">@Node.ConjunctElementCode</p>
    <button disabled="@Node.HasChildren" class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.Ok)" @onclick="() => SetOutcome(InspectionOutcome.Ok)"><i class="far fa-thumbs-up"></i></button>
    <button disabled="@Node.HasChildren" class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.PartiallyOk)" @onclick="() => SetOutcome(InspectionOutcome.PartiallyOk)">P</button>
    <button disabled="@Node.HasChildren" class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.NotOk)" @onclick="() => SetOutcome(InspectionOutcome.NotOk)"><i class="far fa-thumbs-down"></i></button>
    <button class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.NotInspected)" @onclick="() => SetOutcome(InspectionOutcome.NotInspected)">NC</button>
    <button class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.NotApplicable)" @onclick="() => SetOutcome(InspectionOutcome.NotApplicable)">NA</button>
    @if (Node.Outcome != InspectionOutcome.Unset)
    {
        <button @onclick="async () => await OnEditing.InvokeAsync(Node.ConjunctElementCode)" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default">...</button>
        <button @onclick="async () => await OnDeleting.InvokeAsync(Node.ConjunctElementCode)" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default"><i class="far fa-trash-alt"></i></button>
    }
    @if (!string.IsNullOrWhiteSpace(Node.Name))
    {
        <button @onclick="async () => await OnDisplayingInfo.InvokeAsync(Node.ConjunctElementCode)" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default float-right"><i class="fas fa-info"></i></button>
    }
</div>

@code 
{
    [Parameter] public ResultModel Node { get; set; }
    [Parameter] public bool ShowIfAutoSet { get; set; }
    [Parameter] public EventCallback<string> OnNodeViewChanged { get; set; }
    [Parameter] public EventCallback<string> OnEditing { get; set; }
    [Parameter] public EventCallback<ResultModel> OnOutcomeChanged { get; set; }
    [Parameter] public EventCallback<string> OnDeleting { get; set; }
    [Parameter] public EventCallback<string> OnDisplayingInfo { get; set; }
    string displayCssClass => Node.IsAutoSet && !ShowIfAutoSet ? "d-none" : "";
    string autosetCssClass => Node.IsAutoSet ? "striped" : "";
    //Validations validations;
    //private List<SortListItem> sortListItemsDatasource = SortListItem.GetSortListItems();

    async Task SetOutcome(InspectionOutcome outcome)
    {
        var previousOutcome = Node.Outcome;
        Node.Outcome = outcome;
        if (previousOutcome != outcome)
            Node.IsAutoSet = false;
        await OnOutcomeChanged.InvokeAsync(Node);
    }

    //async Task OnEdited()
    //{
    //    edit.Hide();
    //    Node.IsAutoSet = false; // simplistic approach: always clear IsAutoSet when Node is edited (we don't check if anything changed)
    //    await OnEditing.InvokeAsync(Node);
    //}

    //void OnEditOk()
    //{
    //    Validate();
    //}

    //void OnEditCancelled()
    //{
    //    Validate();
    //}

    //private void Validate()
    //{
    //    if (validations.ValidateAll())
    //    {
    //        edit.Hide();
    //    }
    //    else
    //    {
    //        Node.DefectDescription = null;
    //    }
    //}

    //public void ValidateDefectDescription(ValidatorEventArgs e)
    //{
    //    e.Status = Node.DefectId != null &&
    //               Node.DefectId != 0 &&
    //               !string.IsNullOrEmpty(Node.DefectDescription)
    //        ? ValidationStatus.Error
    //        : ValidationStatus.None;
    //}

    public class ResultModel
    {
        public int NumGroups { get; set; }
        public int NumPoints { get; set; }
        public string ConjunctElementCode { get; set; }
        public string ParentConjunctElementCode { get; set; }
        public string ShortName { get; set; }
        public string Name { get; set; }
        public InspectionOutcome Outcome { get; set; }
        public bool IsAutoSet { get; set; }
        public string InspectorComment { get; set; }
        public string FarmerComment { get; set; }
        public string DefectDescription { get; set; }
        public double DefectSize { get; set; }
        public string DefectUnit { get; set; }
        public string Unit { get; set; }
        public int SeriousnessCode { get; set; }
        public string Id { get; set; }
        public IEnumerable<SelectListItem<int>> ComboSeriousnesses { get; set; }
        public int? DefectId { get; set; }
        public IEnumerable<SelectListItem<string>> ComboDefects { get; set; }
        public int? PointId { get; set; }
        public bool HasChildren { get; set; }
        public string Sort { get; set; }

        public void Clear()
        {
            Outcome = InspectionOutcome.Unset;
            InspectorComment = "";
            FarmerComment = "";
            DefectDescription = Defect.None.Description;
            DefectSize = Defect.None.Size.Size;
            DefectUnit = Defect.None.Size.Unit;
            Unit = "";
            SeriousnessCode = DefectSeriousness.Empty.Code;
            IsAutoSet = false;
        }

        public static ResultModel MapFrom(ITreeNode<Result> node)
        {
            if (node == null) return null;
            return new ResultModel
            {
                NumGroups = node.NumGroups,
                NumPoints = node.NumPoints,
                ConjunctElementCode = node.ConjunctElementCode,
                ParentConjunctElementCode = node.Parent?.ConjunctElementCode ?? "",
                ShortName = node.ShortName,
                Name = node.Name,
                Outcome = node.Outcome,
                IsAutoSet = node.IsAutoSet,
                Id = node.ConjunctElementCode.CurateAsElementId(),
                InspectorComment = node.InspectorComment,
                FarmerComment = node.FarmerComment,
                DefectDescription = node.Defect.Description,
                DefectSize = node.Defect.Size.Size,
                DefectUnit = node.Defect.Size.Unit,
                Unit = node.Unit,
                SeriousnessCode = node.Seriousness.Code,
                ComboSeriousnesses = Combo.Seriousnesses(),
                ComboDefects = node.ComboDefects != null ? node.ComboDefects : new List<SelectListItem<string>>(),
                PointId = node.PointId,
                DefectId = node.DefectId,
                HasChildren = node.Children?.Any() ?? false,
                Sort = node.Sort
            };
        }
    }
}
