@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.Config
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@inject IJSRuntime Js
@inject AppConfiguration Config
@inject NavigationManager Navigation
@inject IRepository Repository
@implements IAsyncDisposable

@if (updateAvailable)
{
    <li class="nav-item">
        <button class="nav-link btn btn-info" @onclick="() => updateAppModal.Show()"><i class="fas fa-info-circle"></i> Mise à jour disponible...</button>
    </li>
}

<Blazorise.Modal @ref="@updateAppModal">
    <Blazorise.ModalBackdrop />
    <Blazorise.ModalContent IsCentered="true">
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Mise à jour de l'application</Blazorise.ModalTitle>
            <Blazorise.CloseButton Clicked="() => updateAppModal.Hide()" />
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <div class="alert alert-info" role="alert">
                <p>Une mise à jour est disponible et sera automatiquement installée au prochain démarrage de l'application.</p>
                <u>Attention</u>: Il est recommandé que tous les mandats téléchargés soient <strong>renvoyés</strong> ou <strong>effacés</strong> avant de faire la mise à jour.
            </div>
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button @onclick="SkipWaiting" data-dismiss="modal" type="button" class="btn btn-primary mb-1">
                <i class="fas fa-download"></i> Mettre à jour immédiatement
            </button>
            <button @onclick="() => updateAppModal.Hide()" type="button" class="btn btn-default mb-1">
                <i class="far fa-clock"></i> Attendre la mise à jour automatique
            </button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>

@code {

    // Thanks to https://www.meziantou.net/javascript-isolation-in-blazor-components.htm
    bool updateAvailable;
    Blazorise.Modal updateAppModal;
    JsInteropAsyncActionProxy onNewVersionAvailableProxy;
    JsInteropAsyncActionProxy onNewVersionDeployedProxy;
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= Js.InvokeAsync<IJSObjectReference>("import", Config.BaseUrl + "/js/appUpdateNotifier.js").AsTask();

    protected override async Task OnInitializedAsync()
    {
        onNewVersionAvailableProxy = new JsInteropAsyncActionProxy(OnNewVersionAvailable);
        onNewVersionDeployedProxy = new JsInteropAsyncActionProxy(OnNewVersionDeployed);
        updateAvailable = await Repository.GetAppUpdateAvailableFlag();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await Module;
            await module.InvokeVoidAsync("registerNewAppVersionCallback",
                                         DotNetObjectReference.Create(onNewVersionAvailableProxy),
                                         DotNetObjectReference.Create(onNewVersionDeployedProxy));
        }
    }

    async Task OnNewVersionAvailable()
    {
        Console.WriteLine("A new version of the app is available");
        updateAvailable = true;
        await Repository.SetAppUpdateAvailable();
        StateHasChanged();
    }

    async Task OnNewVersionDeployed()
    {
        updateAvailable = false;
        await Repository.ResetAppUpdateAvailable();
        StateHasChanged();
    }
    
    void SkipWaiting()
    {
        // todo force update like this https://dev.to/drbragg/handling-service-worker-updates-in-your-vue-pwa-1pip
        Navigation.NavigateTo(Config.BaseUrl + "/", true);
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

}
