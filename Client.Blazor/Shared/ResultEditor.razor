@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.Combo
@inject IJSRuntime Js
@inject NavigationManager Navigation

@if (Model.Item.NumPoints > 0 || Model.Item.NumGroups > 0)
{
    <a @onclick="@NavigateToSubNode"><i class="fas fa-chevron-right fa-3x float-left rotate mr-2"></i></a>
}
<span class="badge bg-indigo disabled float-right mr-1">@Model.Item.NumGroups</span>
<span class="badge bg-indigo disabled float-right mr-1">@Model.Item.NumPoints</span>
<h4 class="list-group-item-heading">@Model.Item.ShortName</h4>
<p class="list-group-item-text mb-2">@Model.Item.ConjunctElementCode</p>
<button class="btn btn-circle btn-circle-sm mr-1 @Model.Item.OutcomeCssClass(InspectionOutcome.Ok)" @onclick="() => SetOutcome(InspectionOutcome.Ok)"><i class="far fa-thumbs-up"></i></button>
<button class="btn btn-circle btn-circle-sm mr-1 @Model.Item.OutcomeCssClass(InspectionOutcome.PartiallyOk)  " @onclick="() => SetOutcome(InspectionOutcome.PartiallyOk)">P</button>
<button class="btn btn-circle btn-circle-sm mr-1 @Model.Item.OutcomeCssClass(InspectionOutcome.NotOk)" @onclick="() => SetOutcome(InspectionOutcome.NotOk)"><i class="far fa-thumbs-down"></i></button>
<button class="btn btn-circle btn-circle-sm mr-1 @Model.Item.OutcomeCssClass(InspectionOutcome.NotInspected) " @onclick="() => SetOutcome(InspectionOutcome.NotInspected)">NC</button>
<button class="btn btn-circle btn-circle-sm mr-1 @Model.Item.OutcomeCssClass(InspectionOutcome.NotApplicable) " @onclick="() => SetOutcome(InspectionOutcome.NotApplicable)">NA</button>
@if (Model.Item.Outcome != InspectionOutcome.Unset)
{
    <button @onclick="() => edit.Show()" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default">...</button>
    <button @onclick="() => confirmDelete.Show()" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default"><i class="far fa-trash-alt"></i></button>
}

@*@if (Model.Expanded && (Model.Item.NumPoints > 0 || Model.Item.NumGroups > 0))
    {
        <div class="mt-2">
            @if (groups.Any())
            {
                <div class="list-group">
                    @foreach (var group in groups)
                    {
                        <div id="@group.Item.ConjunctElementCode.CurateAsElementId()" class="list-group-item" href="#">
                            <ResultEditor @ref="@Editor" Model="@group" OnOutcomeChanged="@OutcomeChanged" OnResultChanged="@ResultChanged"></ResultEditor>
                        </div>
                    }
                </div>
            }
            @if (points.Any())
            {
                <div class="list-group">
                    @foreach (var point in points)
                    {
                        <div id="@point.Item.ConjunctElementCode.CurateAsElementId()" class="list-group-item" href="#">
                            <ResultEditor @ref="@Editor" Model="@point" OnOutcomeChanged="@OutcomeChanged" OnResultChanged="@ResultChanged"></ResultEditor>
                        </div>
                    }
                </div>
            }
        </div>
    }*@

<Blazorise.Modal @ref="@confirmDelete">
    <Blazorise.ModalBackdrop />
    <Blazorise.ModalContent>
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Confirmation</Blazorise.ModalTitle>
            <Blazorise.CloseButton Clicked="() => confirmDelete.Hide()" />
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <Blazorise.Field>
                <Blazorise.FieldLabel>Êtes-vous sûr de vouloir supprimer les information saisies (résultat, remarques, pièces jointes, ...) ?</Blazorise.FieldLabel>
            </Blazorise.Field>
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button class="btn btn-info" @onclick="@Delete">Ok</button>
            <button class="btn btn-default" @onclick="() => confirmDelete.Hide()">Annuler</button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>

@if (editModel != null)
{
    <Blazorise.Modal @ref="@edit">
        <Blazorise.ModalBackdrop />
        <EditForm Model="@editModel" OnSubmit="@Save">
            <Blazorise.ModalContent>
                <Blazorise.ModalHeader>
                    <Blazorise.ModalTitle>Résultat détaillé</Blazorise.ModalTitle>
                    <Blazorise.CloseButton Clicked="() => edit.Hide()" />
                </Blazorise.ModalHeader>
                <Blazorise.ModalBody>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Remarque contrôleur</Blazorise.FieldLabel>
                        <Blazorise.MemoEdit Rows="2" @bind-Text="@editModel.InspectorComment"></Blazorise.MemoEdit>
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Remarque exploitant</Blazorise.FieldLabel>
                        <Blazorise.MemoEdit Rows="2" @bind-Text="@editModel.FarmerComment"></Blazorise.MemoEdit>
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>OU Manquement constaté</Blazorise.FieldLabel>
                        <Blazorise.TextEdit @bind-Text="@editModel.DefectDescription"></Blazorise.TextEdit>
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Ampleur du manquement (par ex: surface, longueur, nombre d'animaux, ...)</Blazorise.FieldLabel>
                        <Blazorise.NumericEdit TValue="double" @bind-Value="@editModel.DefectSize"></Blazorise.NumericEdit>
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Unité</Blazorise.FieldLabel>
                        <Blazorise.TextEdit @bind-Text="@editModel.DefectUnit"></Blazorise.TextEdit>
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Gravité</Blazorise.FieldLabel>
                        <Blazorise.Select TValue="int" @bind-SelectedValue="@editModel.SeriousnessCode">
                            @foreach (var option in editModel.ComboSeriousnesses)
                            {
                                <Blazorise.SelectItem Value="@option.Value">@option.Text</Blazorise.SelectItem>
                            }
                        </Blazorise.Select>
                    </Blazorise.Field>
                </Blazorise.ModalBody>
                <Blazorise.ModalFooter>
                    <button type="submit" class="btn btn-primary float-left mr-2"><i class="far fa-save"></i> Enregistrer</button>
                    <button class="btn btn-default float-left mr-2" @onclick="() => edit.Hide()">Annuler</button>
                </Blazorise.ModalFooter>
            </Blazorise.ModalContent>
        </EditForm>
    </Blazorise.Modal>
}

@code {

    [Parameter]
    public ResultModel Model { get; set; }

    [Parameter]
    public EventCallback<InspectionOutcome> OnOutcomeChanged { get; set; }

    [Parameter]
    public EventCallback<EditModel> OnResultChanged { get; set; }

    const int CookieDays = 30;

    List<ResultModel> groups = new List<ResultModel>();
    List<ResultModel> points = new List<ResultModel>();

    ResultEditor editor_;
    ResultEditor Editor
    {
        get => editor_;
        set
        {
            editor_ = value;
            childResultEditors.Add(value);
        }
    }
    readonly List<ResultEditor> childResultEditors = new List<ResultEditor>();
    Blazorise.Modal confirmDelete;
    Blazorise.Modal edit;
    EditModel editModel;

    protected override async Task OnInitializedAsync()
    {
        //groups = Model.Item.Groups.Select(g => ResultModel.FromDomain(g)).ToList();
        //points = Model.Item.Points.Select(p => ResultModel.FromDomain(p)).ToList();
        Model.Expanded = await Js.InvokeAsync<string>("blazorExtensions.ReadCookie", Model.Id) == "1";
        editModel = EditModel.FromDomain(Model.Item);
        await base.OnInitializedAsync();
    }

    void NavigateToSubNode()
    {
        string uri = Config.BaseUrl + "/Checklist/" + Model.FarmInspectionId + "?FarmId=" + Model.FarmId;
        uri += "&conjunctElementCode=" + Model.Item.ConjunctElementCode;
        Navigation.NavigateTo(uri, true);
    }

    async void ToggleChevron()
    {
        Model.Expanded = !Model.Expanded;
        if (Model.Expanded)
        {
            await Js.InvokeAsync<string>("blazorExtensions.SetCookie", Model.Item.ConjunctElementCode.CurateAsElementId(), 1);
        }
        else
        {
            await Js.InvokeAsync<string>("blazorExtensions.RemoveCookie", Model.Item.ConjunctElementCode.CurateAsElementId());
        }
    }

    public async Task Expand()
    {
        Model.Expanded = true;
        await Js.InvokeAsync<string>("blazorExtensions.SetCookie", Model.Item.ConjunctElementCode.CurateAsElementId(), 1);
    }

    public async Task Collapse()
    {
        Model.Expanded = false;
        await Js.InvokeAsync<string>("blazorExtensions.RemoveCookie", Model.Item.ConjunctElementCode.CurateAsElementId());
    }

    public async Task ExpandAll()
    {
        await Expand();
        foreach (var component in childResultEditors)
        {
            await component.ExpandAll();
        }
    }

    public async Task CollapseAll()
    {
        await Collapse();
        foreach (var component in childResultEditors)
        {
            await component.CollapseAll();
        }
    }

    async Task SetOutcome(InspectionOutcome outcome)
    {
        Model.Item.SetOutcome(outcome);
        await OnOutcomeChanged.InvokeAsync(outcome);
    }

    async Task OutcomeChanged(InspectionOutcome outcome)
    {
        await OnOutcomeChanged.InvokeAsync(outcome);
    }

    async Task ResultChanged(EditModel result)
    {
        await OnResultChanged.InvokeAsync(result);
    }

    async Task Delete()
    {
        confirmDelete.Hide();
        await SetOutcome(InspectionOutcome.Unset);
    }

    async Task Save(EditContext editContext)
    {
        var model = (EditModel)editContext.Model;
        Model.Item.SetInspectorComment(model.InspectorComment);
        Model.Item.SetFarmerComment(model.FarmerComment);
        Model.Item.SetDefect(new Defect(model.DefectDescription, new Defect.Measurement(model.DefectSize, model.DefectUnit)),
                             DefectSeriousness.FromCode(model.SeriousnessCode));
        edit.Hide();
        await OnResultChanged.InvokeAsync(model);
    }

    public class ResultModel
    {
        public ITreeNode<Result> Item { get; set; }
        public bool Expanded { get; set; }
        public int FarmId { get; set; }
        public int FarmInspectionId { get; set; }
        public string ExpandedCssClass => Expanded ? "right" : "";
        public string Id => Item?.ConjunctElementCode.CurateAsElementId() ?? "";

        public static ResultModel FromDomain(ITreeNode<Result> item, int farmId, int farmInspectionId, bool expanded = false)
        {
            return new ResultModel
            {
                Item = item,
                FarmId = farmId,
                FarmInspectionId = farmInspectionId,
                Expanded = expanded
            };
        }
    }

    public class EditModel
    {
        public string InspectorComment { get; set; }
        public string FarmerComment { get; set; }
        public int PredefinedDefectId { get; set; }
        public string PredefinedDefectName { get; set; }
        public string PredefinedDefectConjunctElementCode { get; set; }
        public string DefectDescription { get; set; }
        public double DefectSize { get; set; }
        public string DefectUnit { get; set; }
        public int SeriousnessCode { get; set; }
        public string SeriousnessName { get; set; }
        public IEnumerable<SelectListItem<int>> ComboSeriousnesses { get; set; }
        // predefined defect combo

        public static EditModel FromDomain(IResult result)
        {
            var model = new EditModel();
            model.InspectorComment = result.InspectorComment;
            model.FarmerComment = result.FarmerComment;
            model.DefectDescription = result.Defect.Description;
            model.DefectSize = result.Defect.Size.Size;
            model.DefectUnit = result.Defect.Size.Unit;
            model.SeriousnessCode = result.Seriousness.Code;
            model.SeriousnessName = result.Seriousness.Name;
            model.ComboSeriousnesses = Combo.Seriousnesses();
            return model;
        }
    }
}
