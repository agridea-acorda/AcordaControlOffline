@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.Signature
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Mandate
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Pdf
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Pdf.Model
@using Ardalis.GuardClauses
@using EnsureThat
@using Microsoft.AspNetCore.Authorization
@using Signature = Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection.Signature
@using Environment = Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices.Environment
@page "/Signatures/{FarmInspectionId:int}"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IRepository Repository
@inject IJSRuntime Js
@inject IToastService Toast

@if (isInitialized)
{
    <div class="card">
        <div class="card-header">
            <div class="card-title">Rapport de contrôle</div>
            <div class="card-tools">
                <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo(Environment.BaseUrl + "/Checklist2/" + FarmInspectionId + "?FarmId=" + farmId)'>
                    <i class="fas fa-arrow-left"></i>
                    Retour Check-Liste
                </button>
                <button type="button" class="btn btn-sm btn-success" @onclick='() => Navigation.NavigateTo(Environment.BaseUrl + "/MandateDetail/" + farmId)'>
                    <i class="fas fa-arrow-right"></i>
                    Mandat
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="form-group">
                <button class="btn btn-primary" @onclick="@ProvisoryPdfReport" disabled=@generatingPdf>
                    <i class="@(generatingPdf ? "fas fa-spinner fa-spin" : "far fa-file-pdf")"></i>
                    Afficher le rapport de contrôle provisoire
                </button>
            </div>
            <div class="form-group">
                <div class="callout callout-info">
                    <p>L'exploitant ou son représentant atteste avoir pris connaissance du rapport de contrôle ci-dessus. En cas de contestation, une réclamation écrite avec les points contestés peut être adressée dans les trois jours ouvrables suivant le contrôle à l'organisme d'inspection ayant effectué le contrôle.</p>
                </div>
            </div>
        </div>
    </div>
}

@if (isInitialized)
{
    <EditForm Model="@actionsOrDocumentEditModel" OnSubmit="@SaveActionsOrDocuments">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Remarques / Documents / Mesures</h3>
            </div>
            <div class="card-body">
                <div class="form-group"></div>
                <div class="form-group">
                    <label for="@nameof(actionsOrDocumentEditModel.CommentForFarmer)">Remarque générale</label>
                    <Blazorise.MemoEdit Text="@actionsOrDocumentEditModel.CommentForFarmer" TextChanged="@OnCommentForFarmerChanged" id="@nameof(actionsOrDocumentEditModel.CommentForFarmer)" />
                </div>
                <div class="form-group">
                    <label for="@nameof(actionsOrDocumentEditModel.ActionsOrDocuments)">Documents à livrer / mesures à prendre</label>
                    <Blazorise.MemoEdit Text="@actionsOrDocumentEditModel.ActionsOrDocuments" TextChanged="@OnActionsOrDocumentsChanged" id="@nameof(actionsOrDocumentEditModel.ActionsOrDocuments)" />
                </div>
                <div class="form-group">
                    <label for="@nameof(actionsOrDocumentEditModel.DueDate)">Délai</label>
                    <Blazorise.DateEdit TValue="DateTime?" Date="@actionsOrDocumentEditModel.DueDate" DateChanged="@OnDueDateChanged" id="@nameof(actionsOrDocumentEditModel.DueDate)" />
                </div>
            </div>
            <div class="card-footer">
                @if (needsSaving)
                {
                    <button type="submit" class="btn btn-primary"><i class="far fa-save"></i> Enregistrer</button>
                }
            </div>
        </div>
    </EditForm>
}

@if (isInitialized)
{
    string inspectorSignatureUrl = $"{Environment.BaseUrl}/Sign/{FarmInspectionId}?FarmId={farmId}&type=inspector&ReturnUrl={Navigation.Uri}";
    string farmerSignatureUrl = $"{Environment.BaseUrl}/Sign/{FarmInspectionId}?FarmId={farmId}&type=farmer&ReturnUrl={Navigation.Uri}";
    string inspector2SignatureUrl = $"{Environment.BaseUrl}/Sign/{FarmInspectionId}?FarmId={farmId}&type=inspector2&ReturnUrl={Navigation.Uri}";
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Signatures</h3>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                @if (signatures.InspectorSignature.HasSigned)
                {
                    <div class="form-group">
                        <label>Le contrôleur @signatures.InspectorDisplay</label>
                        <button @onclick="() => Navigation.NavigateTo(inspectorSignatureUrl)" class="btn btn-sm btn-default"><i class="fas fa-undo"></i> Corriger la signature</button>
                        <img src="@signatures.InspectorSignature.DataUrl" style="width: 100%" />
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label>Le contrôleur n'a pas signé</label>
                        <div class="d-block">
                            <div class="btn-group w-100" role="group">
                                <button @onclick="() => Navigation.NavigateTo(inspectorSignatureUrl)" class="btn btn-primary"><i class="far fa-hand-point-right"></i> Signer</button>
                                @if (signatures.ExistingInspectorSignature.HasSigned)
                                {
                                    <button @onclick="@(() => ReuseSignature(signatures.ExistingInspectorSignature, "inspector"))" class="btn btn-default"><i class="far fa-clone"></i> Apposer la signature</button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </li>
            <li class="list-group-item">
                @if (signatures.FarmerSignature.HasSigned)
                {
                    <div class="form-group">
                        <label>L'exploitant @signatures.FarmerDisplay</label>
                        <button @onclick="@(() => Navigation.NavigateTo(farmerSignatureUrl))" class="btn btn-sm btn-default"><i class="fas fa-undo"></i> Corriger la signature</button>
                        <img src="@signatures.FarmerSignature.DataUrl" style="width: 100%" />
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label>L'exploitant n'a pas signé</label>
                        <div class="d-block">
                            <div class="btn-group w-100">
                                <button @onclick="() => Navigation.NavigateTo(farmerSignatureUrl)" class="btn btn-primary"><i class="far fa-hand-point-right"></i> Signer</button>
                                @if (signatures.ExistingFarmerSignature.HasSigned)
                                {
                                    <button @onclick="@(() => ReuseSignature(signatures.ExistingFarmerSignature, "farmer"))" class="btn btn-default"><i class="far fa-clone"></i> Apposer la signature</button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </li>
            <li class="list-group-item">
                @if (signatures.AdditionalSignature.HasSigned)
                {
                    <div class="form-group">
                        <label>Contrôleur additionnel @signatures.AdditionalInspectorDisplay</label>
                        <button @onclick="() => Navigation.NavigateTo(inspector2SignatureUrl)" class="btn btn-sm btn-default"><i class="fas fa-undo"></i> Corriger la signature</button>
                        <img src="@signatures.AdditionalSignature.DataUrl" style="width: 100%" />
                    </div>
                }
                else
                {
                    <p>
                        <a href="@inspector2SignatureUrl">Cliquer ici pour un contrôleur additionnel</a>
                    </p>
                    @if (signatures.ExistingAdditionalSignature.HasSigned)
                    {
                        <p><button @onclick="@(() => ReuseSignature(signatures.ExistingAdditionalSignature, "inspector2"))" class="btn btn-xs btn-default"><i class="far fa-clone"></i> Apposer la signature</button></p>
                    }
                }
            </li>
        </ul>
    </div>

}

@code {
    [Parameter]
    public int FarmInspectionId { get; set; }
    private int farmId;
    Mandate mandate;
    Inspection inspection;

    ActionsOrDocumentEditModel actionsOrDocumentEditModel;
    bool needsSaving = false;

    SignaturesDisplay signatures;
    bool isInitialized;
    bool generatingPdf;

    public class SignaturesDisplay
    {
        public SignatureModel FarmerSignature { get; set; }
        public SignatureModel InspectorSignature { get; set; }
        public SignatureModel AdditionalSignature { get; set; }
        public string FarmerDisplay { get; set; }
        public string InspectorDisplay { get; set; }
        public string AdditionalInspectorDisplay { get; set; }
        public SignatureModel ExistingFarmerSignature { get; set; }
        public SignatureModel ExistingInspectorSignature { get; set; }
        public SignatureModel ExistingAdditionalSignature { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        //actionsOrDocumentEditModel = await Repository.ReadActionsOrDocumentsAsync() ?? new ActionsOrDocumentEditModel();
        farmId = int.Parse(Navigation.QueryString("FarmId"));
        mandate = await Repository.ReadMandateAsync(farmId);
        Ensure.That(mandate, nameof(mandate)).IsNotNull();
        inspection = mandate.Inspections.FirstOrDefault(x => x.FarmInspectionId == FarmInspectionId);
        Ensure.That(inspection, nameof(inspection)).IsNotNull();
        actionsOrDocumentEditModel = ActionsOrDocumentEditModel.FromDomain(inspection);
        signatures = new SignaturesDisplay
        {
            FarmerSignature = SignatureModel.FromDomain(inspection.FarmerSignature),
            InspectorSignature = SignatureModel.FromDomain(inspection.InspectorSignature),
            AdditionalSignature = SignatureModel.FromDomain(inspection.Inspector2Signature),
            FarmerDisplay = inspection.FarmerSignature.HasProxy
                                ? $"(représenté par {inspection.FarmerSignature.Proxy})"
                                : $"({inspection.FarmerSignature.Signatory})",
            InspectorDisplay = $"({inspection.InspectorSignature.Signatory})",
            AdditionalInspectorDisplay = $"({inspection.Inspector2Signature.Signatory})",
            ExistingInspectorSignature = SignatureModel.FromDomain(GetExistingOtherSignature(mandate, FarmInspectionId, i => i.InspectorSignature.HasSigned)),
            ExistingFarmerSignature = SignatureModel.FromDomain(GetExistingOtherSignature(mandate, FarmInspectionId, i => i.FarmerSignature.HasSigned)),
            ExistingAdditionalSignature = SignatureModel.FromDomain(GetExistingOtherSignature(mandate, FarmInspectionId, i => i.Inspector2Signature.HasSigned))
        };
        isInitialized = true;
    }

    async Task ReuseSignature(SignatureModel model, string type)
    {
        var signature = new Signature(model.Signatory, model.Proxy, model.Data, model.DataUrl);
        switch (type)
        {
            case "inspector":
                signatures.InspectorSignature = model;
                signatures.InspectorDisplay = $"({model.Signatory})";
                await Repository.SaveInspectorSignatureAsync(farmId, FarmInspectionId, signature);
                break;

            case "farmer":
                signatures.FarmerSignature = model;
                signatures.FarmerDisplay = signatures.FarmerSignature.HasProxy
                                               ? $"(représenté par {model.Proxy})"
                                               : $"({model.Signatory})";
                await Repository.SaveFarmerSignatureAsync(farmId, FarmInspectionId, signature);
                break;

            case "inspector2":
                signatures.AdditionalSignature = model;
                signatures.AdditionalInspectorDisplay = $"({model.Signatory})";
                await Repository.SaveInspector2SignatureAsync(farmId, FarmInspectionId, signature);
                break;
        }
    }

    private Signature GetExistingOtherSignature(Mandate mandate, int farmInspectionId, Func<Inspection, bool> predicate)
    {
        return mandate.Inspections
                      .Where(i => i.FarmInspectionId != farmInspectionId)
                      .FirstOrDefault(predicate)
                      ?.InspectorSignature ?? Signature.None;
    }

    void OnDueDateChanged(DateTime? date)
    {
        actionsOrDocumentEditModel.DueDate = date;
        needsSaving = true;
    }

    void OnCommentForFarmerChanged(string value)
    {
        actionsOrDocumentEditModel.CommentForFarmer = value;
        needsSaving = true;
    }

    void OnActionsOrDocumentsChanged(string value)
    {
        actionsOrDocumentEditModel.ActionsOrDocuments = value;
        needsSaving = true;
    }

    async void SaveActionsOrDocuments()
    {
        var complianceBackup = inspection.Compliance;
        inspection.SetCommentForFarmer(actionsOrDocumentEditModel.CommentForFarmer);
        inspection.SetCompliance(new Compliance(actionsOrDocumentEditModel.ActionsOrDocuments,
                                                actionsOrDocumentEditModel.DueDate,
                                                complianceBackup.DueDateNotRespected,
                                                complianceBackup.DueDateRespected,
                                                complianceBackup.FurtherInvestigationNeeded,
                                                complianceBackup.IncompleteOrNonCompliant));
        await Repository.SaveMandateAsync(mandate, farmId);
        Toast.Success();
        needsSaving = false;
        await Task.Delay(1);
        StateHasChanged();
    }

    async void ProvisoryPdfReport()
    {
        if (generatingPdf) return;
        generatingPdf = true;
        await Task.Delay(1);
        StateHasChanged();

        try 
        { 
            var farm = await Repository.ReadFarmAsync(farmId);
            Guard.Against.Null(farm, nameof(farm));
            var checklist = await Repository.ReadChecklistAsync(FarmInspectionId);
            Guard.Against.Null(checklist, nameof(checklist));
            string cantonCode = "NE"; //todo get from authorization system
            string userName = "johnny-b-goode"; // todo get from authorization system
            string logoPath = "img/focaa.png";
            var pdf = new InspectionPdf(InspectionPdfModel.FromDomain(inspection,
                                                                      farm,
                                                                      checklist,
                                                                      cantonCode,
                                                                      logoPath), userName, true);
            string filename = InspectionPdf.Filename(2021, farm.Ktidb, farm.FarmName, inspection.Domain.ShortName);
            await Js.InvokeVoidAsync("BlazorDownloadFile", filename, "application/octet-stream", pdf.CreatePdf());
        }
        finally
        {
            generatingPdf = false;
            StateHasChanged();
        }
    }
}

