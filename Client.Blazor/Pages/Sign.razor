@using Microsoft.AspNetCore.Authorization
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.Signature
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection

@page "/Sign/{FarmInspectionId:int}"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IRepository Repository

@if (isInitialized)
{
    <Signature Model="@signatureModel" Title="@title" FarmId="@farmId" ReturnUrl="@returnUrl" OnSave="@Save" />
}

@code {
    [Parameter]
    public int FarmInspectionId { get; set; }
    string returnUrl;
    int farmId;
    string type;
    SignatureModel signatureModel;
    string title;
    bool isInitialized;
    const string Inspector = "inspector";
    const string Farmer = "farmer";
    const string Inspector2 = "inspector2";
    static readonly string[] AllowedTypes = {Inspector, Farmer, Inspector2};

    protected override async Task OnInitializedAsync()
    {
        farmId = int.Parse(Navigation.QueryString("FarmId"));
        returnUrl = Navigation.QueryString("ReturnUrl");
        type = Navigation.QueryString("Type");
        if (!AllowedTypes.Contains(type))
            throw new ArgumentException($"Invalid querystring value [Type], must be one of {{{Inspector},{Farmer},{Inspector2}}}");

        AcordaControlOffline.Shared.Domain.Inspection.Signature signature = null;
        FinishStatus finishStatus = null;
        switch (type)
        {
            case "inspector":
                title = "Signature contrôleur";
                signature = await Repository.ReadInspectorSignatureAsync(farmId, FarmInspectionId);
                finishStatus = (await Repository.ReadMandateAsync(farmId)).Inspection(FarmInspectionId).FinishStatus;
                break;

            case "farmer":
                title = "Signature exploitant";
                signature = await Repository.ReadFarmerSignatureAsync(farmId, FarmInspectionId);
                break;

            case "inspector2":
                title = "Signature contrôleur additionnel";
                signature = await Repository.ReadInspector2SignatureAsync(farmId, FarmInspectionId);
                break;
        }
        signatureModel = SignatureModel.FromDomain(signature);
        signatureModel.ShowProxy = type == Farmer;
        signatureModel.ShowDoneOn = type == Inspector;
        if (type == Inspector) signatureModel.DoneOn = finishStatus?.DoneOn ?? DateTime.Now;
        isInitialized = true;
    }

    async Task Save(SignatureModel model)
    {
        var signature = new AcordaControlOffline.Shared.Domain.Inspection.Signature(model.Signatory, model.Proxy, model.HasProxy, model.Town.FirstOrDefault()?.Id, model.Data, model.DataUrl);
        if (model.DoneOn.HasValue)
        {
            var mandate = await Repository.ReadMandateAsync(farmId);
            mandate.Inspection(FarmInspectionId).Finish(new FinishStatus(model.DoneOn, model.Signatory));
            await Repository.SaveMandateAsync(mandate, farmId);
        }

        switch (type)
        {
            case "inspector":
                await Repository.SaveInspectorSignatureAsync(farmId, FarmInspectionId, signature);
                break;

            case "farmer":
                await Repository.SaveFarmerSignatureAsync(farmId, FarmInspectionId, signature);
                break;

            case "inspector2":
                await Repository.SaveInspector2SignatureAsync(farmId, FarmInspectionId, signature);
                break;
        }
    }
}
