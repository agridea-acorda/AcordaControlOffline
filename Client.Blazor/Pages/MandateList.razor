@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.Api
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.MandateList
@using CSharpFunctionalExtensions
@using EnsureThat
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.Config
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.Auth
@using System.Web
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Mandate
@using Mandate = Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.MandateList.Mandate
@using System.Threading
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist
@using System.Runtime.CompilerServices
@using System.Security.Cryptography.X509Certificates

@page "/MandateList"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IRepository Repository
@inject IApiClient Api
@inject IToastService Toast
@inject AppConfiguration Config
@inject IJSRuntime Js
@inject IAuthService AuthService

<div class="row">
    <div class="col-sm-12">
        <div class="card">
            <div class="card-header">
                <button @onclick="@Refresh" class="btn btn-default btn-sm float-right" disabled="@loading">
                    <i class="@(loading ? "fas fa-spinner fa-spin": "fas fa-cloud-download-alt")"></i> Rafraîchir la liste
                </button>
                <h3 class="card-title">@numMandates exploitation@(plural) à contrôler</h3>
            </div>
            <div class="card-body p-0">
                <div class="row">
                    <div class="col ml-3">
                        <Blazorise.Field>
                            <Blazorise.FieldLabel>Ktidb</Blazorise.FieldLabel>
                            <Blazorise.TextEdit @bind-Text="@filter.Ktidb"></Blazorise.TextEdit>
                        </Blazorise.Field>
                    </div>
                    <div class="col mr-3">
                        <Blazorise.Field>
                            <Blazorise.FieldLabel>Exploitation</Blazorise.FieldLabel>
                            <Blazorise.TextEdit @bind-Text="@filter.FarmName"></Blazorise.TextEdit>
                        </Blazorise.Field>
                    </div>
                </div>
                <div class="row">
                    <div class="col ml-3">
                        <Blazorise.Field>
                            <Blazorise.FieldLabel>Domaine</Blazorise.FieldLabel>
                            <Select2 TItem="SortListItem"
                                     TSource="List<SortListItem>"
                                     IdSelector="p => p.Id"
                                     TextSelector="SortListItem.GetSortListItemDisplayName"
                                     Datasource="filter.DomainsDS"
                                     Value="filter.Domains"
                                     Multiselect="true"
                                     GetElementById="(items, filter, token) => Task.FromResult(items.SingleOrDefault(i => i.Id.ToString().Equals(filter)))"
                                     FilterFunction="(items, filter, token) => Task.FromResult(items.Where(i => i.Id.ToString().Contains(filter, StringComparison.CurrentCultureIgnoreCase)).ToList())"
                                     class="mt-2 mr-2 mb-2"></Select2>
                        </Blazorise.Field>
                    </div>
                    <div class="col mr-3">
                        <Blazorise.Field>
                            <Blazorise.FieldLabel>Motif</Blazorise.FieldLabel>
                            <Select2 TItem="SortListItem"
                                     TSource="List<SortListItem>"
                                     IdSelector="p => p.Id"
                                     TextSelector="SortListItem.GetSortListItemDisplayName"
                                     Datasource="filter.ReasonsDS"
                                     Value="filter.Reasons"
                                     Multiselect="true"
                                     GetElementById="(items, filter, token) => Task.FromResult(items.SingleOrDefault(i => i.Id.ToString().Equals(filter)))"
                                     FilterFunction="(items, filter, token) => Task.FromResult(items.Where(i => i.Id.ToString().Contains(filter, StringComparison.CurrentCultureIgnoreCase)).ToList())"
                                     class="mt-2 mr-2 mb-2"></Select2>
                        </Blazorise.Field>
                    </div>
                </div>
                <div class="row">
                    <div class="col ml-3">
                        <Blazorise.Field>
                            <Blazorise.FieldLabel>Contrôleurs</Blazorise.FieldLabel>
                            <Select2 TItem="SortListItem"
                                     TSource="List<SortListItem>"
                                     IdSelector="p => p.Id"
                                     TextSelector="SortListItem.GetSortListItemDisplayName"
                                     Datasource="filter.InspectorsDS"
                                     Value="filter.Inspectors"
                                     Multiselect="true"
                                     GetElementById="(items, filter, token) => Task.FromResult(items.SingleOrDefault(i => i.Id.ToString().Equals(filter)))"
                                     FilterFunction="(items, filter, token) => Task.FromResult(items.Where(i => i.Id.ToString().Contains(filter, StringComparison.CurrentCultureIgnoreCase)).ToList())"
                                     class="mt-2 mr-2 mb-2"></Select2>
                        </Blazorise.Field>
                    </div>
                    <div class="col mr-3">
                        <Blazorise.Field>
                            <Blazorise.FieldLabel>Campagne</Blazorise.FieldLabel>
                            <Select2 TItem="SortListItem"
                                     TSource="List<SortListItem>"
                                     IdSelector="p => p.Id"
                                     TextSelector="SortListItem.GetSortListItemDisplayName"
                                     Datasource="filter.CampaignsDS"
                                     Value="filter.Campaigns"
                                     Multiselect="true"
                                     GetElementById="(items, filter, token) => Task.FromResult(items.SingleOrDefault(i => i.Id.ToString().Equals(filter)))"
                                     FilterFunction="(items, filter, token) => Task.FromResult(items.Where(i => i.Id.ToString().Contains(filter, StringComparison.CurrentCultureIgnoreCase)).ToList())"
                                     class="mt-2 mr-2 mb-2"></Select2>
                        </Blazorise.Field>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <button @onclick="@ApplyFilter" class="btn btn-default btn-sm float-left ml-3" disabled="@loadingFilter">
                            <i class="@(loadingFilter ? "fas fa-spinner fa-spin" : "")"></i> Appliquer le filtre
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <p class="ml-3 mt-2">
                            <Blazorise.Switch TValue="bool" @bind-Checked="@showClosed"><span class="font-weight-normal">Afficher clôturés</span></Blazorise.Switch>
                        </p>
                    </div>
                    <div class="col">
                        <Select2 TItem="SortListItem"
                                 TSource="List<SortListItem>"
                                 IdSelector="p => p.Id"
                                 TextSelector="SortListItem.GetSortListItemDisplayName"
                                 Datasource="sortListItemsDatasource"
                                 Value="sortListItems"
                                 Multiselect="true"
                                 GetElementById="(items, filter, token) => Task.FromResult(items.SingleOrDefault(i => i.Id.ToString().Equals(filter)))"
                                 FilterFunction="(items, filter, token) => Task.FromResult(items.Where(i => i.Id.ToString().Contains(filter, StringComparison.CurrentCultureIgnoreCase)).ToList())"
                                 OnValueChanged="OrderMandates"
                                 class="mt-2 mr-2 mb-2"></Select2>
                    </div>
                </div>

                <div class="list-group">
                    @if (loading || mandates == null)
                    {
                        <MandateListPlaceholderLoading />
                    }
                    else
                    {
                        foreach (var mandate in mandatesToDisplay)
                        {
                            <div class="list-group-item @mandate.Farm.FarmTypeCode.BackgroundCssClass()">
                                @if (mandate.SyncStatus == SyncStatus.Loaded ||
                                  mandate.SyncStatus == SyncStatus.Deleting ||
                                  mandate.SyncStatus == SyncStatus.Merging)
                                {
                                    <button @onclick="() => SelectMandate(mandate)" class="btn btn-outline-danger btn-sm float-right ml-1" data-toggle="modal" data-target="#deleteModal">
                                        @if (mandate.SyncStatus != SyncStatus.Deleting)
                                        {
                                            <i class="far fa-trash-alt"></i><span class="sr-only">Supprimer les données locales</span>
                                        }
                                        @if (mandate.SyncStatus == SyncStatus.Deleting)
                                        {
                                            <i class="fas fa-spinner fa-spin"></i>
                                            <span class="sr-only">Suppression en cours...</span>
                                        }
                                    </button>
                                    <button @onclick="() => SelectMandate(mandate, mergeModal)" class="btn btn-outline-primary btn-sm float-right ml-1">
                                        @if (mandate.SyncStatus != SyncStatus.Merging)
                                        {
                                            <i class="fas fa-cloud-upload-alt"></i><span class="sr-only">Renvoyer les données saisies</span><span> Renvoyer</span>
                                        }
                                        @if (mandate.SyncStatus == SyncStatus.Merging)
                                        {
                                            <i class="fas fa-spinner fa-spin"></i><span class="sr-only">Renvoi des données en cours...</span><span> En cours...</span>
                                        }
                                    </button>
                                    <button class="btn btn-success btn-sm float-right ml-1" @onclick="() => NavigateToMandateDetail(mandate.Farm.Id)">
                                        <i class="fas fa-arrow-right"></i><span class="sr-only">Naviguer vers le détail du mandat</span> Mandat
                                    </button>
                                }
                                @if (mandate.SyncStatus == SyncStatus.Unavailable || mandate.SyncStatus == SyncStatus.Loading)
                                {
                                    <button @onclick="() => DownloadMandate(mandate, mandate.Farm.Id)" class="btn btn-primary btn-sm float-right ml-1">
                                        @if (mandate.SyncStatus != SyncStatus.Loading)
                                        {
                                            <i class="fas fa-cloud-download-alt"></i><span class="sr-only">Télécharger</span>
                                            <span>Télécharger</span>
                                        }

                                        @if (mandate.SyncStatus == SyncStatus.Loading)
                                        {
                                            <i class="fas fa-spinner fa-spin"></i>
                                            <span>Téléchargement en cours...</span>
                                        }
                                    </button>
                                }

                                <h4 class="list-group-item-heading mb-1">@mandate.Farm.Ktidb @mandate.Farm.FarmName</h4>
                                <p class="list-group-item-text mb-1">
                                    <FarmBase Farm="@mandate.Farm" />
                                </p>

                                <BadgeBar Badges="@mandate.Farm.Badges" />

                                @foreach (var inspection in mandate.Inspections.Where(i => !i.IsClosed || i.IsClosed && showClosed))
                                {
                                    <ProgressBar Progress="@inspection" />
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Envoyer le mandat vers le serveur</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger" role="alert">
                    <u>Attention</u>: les données du mandat (checklist, signatures, suivi, ...) saisies seront envoyées au serveur puis <strong>effacées de la tablette</strong>.
                    Etes-vous sûr(e) ?
                </div>
            </div>
            <div class="modal-footer">
                <button @onclick="() => MergeMandate(selectedMandate)" data-dismiss="modal" type="button" class="btn btn-primary">
                    <i class="fas fa-cloud-upload-alt"></i> J'ai compris, envoyer
                </button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Annuler</button>
            </div>
        </div>
    </div>
</div>

<Blazorise.Modal @ref="@mergeModal">
    <Blazorise.ModalBackdrop />
    <Blazorise.ModalContent IsCentered="true">
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Envoyer le mandat vers le serveur</Blazorise.ModalTitle>
            <Blazorise.CloseButton Clicked="() => mergeModal.Hide()" />
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <div class="alert alert-danger" role="alert">
                <u>Attention</u>: les données du mandat (checklist, signatures, suivi, ...) saisies seront envoyées au serveur puis <strong>effacées de la tablette</strong>.
                Etes-vous sûr(e) ?
            </div>
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button @onclick="() => MergeMandate(selectedMandate)" data-dismiss="modal" type="button" class="btn btn-primary">
                <i class="fas fa-cloud-upload-alt"></i> J'ai compris, envoyer
            </button>
            <button @onclick="() => mergeModal.Hide()" type="button" class="btn btn-default">Annuler</button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Supprimer les données téléchargées</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger" role="alert">
                    <u>Attention</u>: les données du mandat seront <strong>effacées de la tablette</strong>.
                    Etes-vous sûr(e) ?
                </div>
            </div>
            <div class="modal-footer">
                <button @onclick="() => DeleteMandate(selectedMandate)" data-dismiss="modal" type="button" class="btn btn-primary">
                    <i class="far fa-trash-alt"></i> Oui, effacer
                </button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Annuler</button>
            </div>
        </div>
    </div>
</div>

@code {

    bool showClosed = false;
    private Mandate[] mandates;
    private Mandate[] mandatesBKFilter;
    bool loading = false;
    bool loadingFilter = false;
    private Mandate[] mandatesToDisplay => (mandates != null
                                        ? mandates.Where(m => m.Inspections.Any(i => !i.IsClosed || i.IsClosed && showClosed)).ToArray()
                                        : Enumerable.Empty<Mandate>().ToArray())
        .ToArray();
    string numMandates => mandatesToDisplay.Length.ToString() + " ";
    string plural => mandates == null ? "s" :
                     mandates.Length > 1 ? "s"
                     : "";
    Mandate selectedMandate;
    Blazorise.Modal mergeModal;

    private List<SortListItem> sortListItemsDatasource = SortListItem.GetSortListItems();
    private List<SortListItem> sortListItems = new List<SortListItem> { };

    private Filter filter = new Filter();

    private async Task OrderMandates()
    {
        string value = JsonConvert.SerializeObject(sortListItems);
        await Js.InvokeVoidAsync("setSortListItems", value);

        if (sortListItems.Count > 0)
        {
            var sortMandates = mandates.OrderBy(x => 1 == 1);

            switch (sortListItems[0].Id)
            {
                case "NameASC":
                    sortMandates = sortMandates.OrderBy(x => x.Farm.FarmName);
                    break;
                case "NameDESC":
                    sortMandates = sortMandates.OrderByDescending(x => x.Farm.FarmName);
                    break;
                case "KtidbASC":
                    sortMandates = sortMandates.OrderBy(x => x.Farm.Ktidb);
                    break;
                case "KtidbDESC":
                    sortMandates = sortMandates.OrderByDescending(x => x.Farm.Ktidb);
                    break;
                case "FormeExASC":
                    sortMandates = sortMandates.OrderBy(x => x.Farm.FarmType);
                    break;
                case "FormeExDESC":
                    sortMandates = sortMandates.OrderByDescending(x => x.Farm.FarmType);
                    break;
                case "CommuneASC":
                    sortMandates = sortMandates.OrderBy(x => x.Farm.MunicipalityName);
                    break;
                case "CommuneDESC":
                    sortMandates = sortMandates.OrderByDescending(x => x.Farm.MunicipalityName);
                    break;
                case "LocaliteASC":
                    sortMandates = sortMandates.OrderBy(x => x.Farm.TownName);
                    break;
                case "LocaliteDESC":
                    sortMandates = sortMandates.OrderByDescending(x => x.Farm.TownName);
                    break;
            }
            foreach (var item in sortListItems)
            {
                switch (item.Id)
                {
                    case "NameASC":
                        sortMandates = sortMandates.ThenBy(x => x.Farm.FarmName);
                        break;
                    case "NameDESC":
                        sortMandates = sortMandates.ThenByDescending(x => x.Farm.FarmName);
                        break;
                    case "KtidbASC":
                        sortMandates = sortMandates.ThenBy(x => x.Farm.Ktidb);
                        break;
                    case "KtidbDESC":
                        sortMandates = sortMandates.ThenByDescending(x => x.Farm.Ktidb);
                        break;
                    case "FormeExASC":
                        sortMandates = sortMandates.ThenBy(x => x.Farm.FarmType);
                        break;
                    case "FormeExDESC":
                        sortMandates = sortMandates.ThenByDescending(x => x.Farm.FarmType);
                        break;
                    case "CommuneASC":
                        sortMandates = sortMandates.ThenBy(x => x.Farm.MunicipalityName);
                        break;
                    case "CommuneDESC":
                        sortMandates = sortMandates.ThenByDescending(x => x.Farm.MunicipalityName);
                        break;
                    case "LocaliteASC":
                        sortMandates = sortMandates.ThenBy(x => x.Farm.TownName);
                        break;
                    case "LocaliteDESC":
                        sortMandates = sortMandates.ThenByDescending(x => x.Farm.TownName);
                        break;
                }
            }

            mandates = sortMandates.ToArray();
            StateHasChanged();
        }



    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Executing OnInitialized Async from MandateList");
        mandates = await Repository.ReadAllMandatesAsync();
        if (mandates == null)
        {
            await TryFetchMandatesAndSave();
        }
        mandates = await Repository.ReadAllMandatesAsync() ?? Enumerable.Empty<Mandate>().ToArray();
        mandatesBKFilter = mandates;
        await SetSyncStatus();

        string sortListitems = await Js.InvokeAsync<string>("getSortListItems");
        if (sortListitems != null)
        {
            sortListItems = JsonConvert.DeserializeObject<List<SortListItem>>(sortListitems);
        }
        else
        {
            sortListItems = new List<SortListItem>();
        }

        string filterMandates = await Js.InvokeAsync<string>("getFilterMandates");
        if (filterMandates != null)
        {
            filter = JsonConvert.DeserializeObject<Filter>(filterMandates);
        }
        else
        {
            filter = new Filter();
        }
        await PopulateFilters();
        await ApplyFilter();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            //Console.WriteLine("First Render");
            await Task.Delay(3);
            await Js.InvokeVoidAsync("getMandatesScrollPosition");
        }

    }

    async Task Refresh()
    {
        if (loading) return;
        await TryFetchMandatesAndSave();
        mandates = await Repository.ReadAllMandatesAsync() ?? Enumerable.Empty<Mandate>().ToArray();
        mandatesBKFilter = mandates;
        await PopulateFilters();
        await SetSyncStatus();
    }

    async Task NavigateToMandateDetail(int id)
    {
        await Js.InvokeVoidAsync("setMandatesScrollPosition");
        if (id > 0)
        {
            Navigation.NavigateTo($"{Config.BaseUrl}/MandateDetail/{id}");
        }
    }

    async Task DownloadMandate(Mandate mandateModel, int farmId)
    {
        if (mandateModel.SyncStatus == SyncStatus.Loading) return;
        var savedSyncStatus = mandateModel.SyncStatus;
        mandateModel.SyncStatus = SyncStatus.Loading;
        await Task.Delay(1); // force re-render
        StateHasChanged();

        try
        {
            if ((await FetchThenSave(() => Api.FetchRawJsonAsync($"mandates/{farmId}"),
                                    json => Repository.SaveMandateJsonAsync(json, farmId)))
                .IsFailure)
            {
                mandateModel.SyncStatus = savedSyncStatus;
                return;
            }

            if ((await FetchThenSave(() => Api.FetchRawJsonAsync($"farms/{farmId}"),
                                     json => Repository.SaveFarmJsonAsync(json, farmId)))
                .IsFailure)
            {
                mandateModel.SyncStatus = savedSyncStatus;
                return;
            }

            var mandate = await Repository.ReadMandateAsync(farmId);
            if (mandate == null)
            {
                mandateModel.SyncStatus = savedSyncStatus;
                return;
            }

            foreach (var inspection in mandate.Inspections)
            {
                if ((await FetchThenSave(() => Api.FetchRawJsonAsync($"checklists/{inspection.FarmInspectionId}"),
                                         data => Repository.SaveChecklistJsonAsync(data, inspection.FarmInspectionId)))
                    .IsFailure)
                {
                    mandateModel.SyncStatus = savedSyncStatus;
                    return;
                }
            }

            mandateModel.SyncStatus = SyncStatus.Loaded;
        }

        catch (Exception e)
        {
            Console.WriteLine(e.ToLogErrorMessage());
            Toast.Error(e.ToUserErrorMessage());
            mandateModel.SyncStatus = savedSyncStatus;
        }
    }

    void SelectMandate(Mandate mandate, Blazorise.Modal modal = null)
    {
        selectedMandate = mandate;
        modal?.Show();
    }

    async Task DeleteMandate(Mandate mandateModel)
    {
        mandateModel.SyncStatus = SyncStatus.Deleting;

        await Task.Delay(1);
        int farmId = mandateModel.Farm.Id;
        var mandate = await Repository.ReadMandateAsync(farmId);
        if (mandate != null)
            foreach (var inspection in mandate.Inspections)
            {
                await Repository.DeleteChecklistAsync(inspection.FarmInspectionId);
            }

        await Repository.DeleteFarmAsync(farmId);
        await Repository.DeleteMandateAsync(farmId);

        mandateModel.SyncStatus = SyncStatus.Unavailable;
    }

    async Task MergeMandate(Mandate mandateModel)
    {
        if (mandateModel.SyncStatus == SyncStatus.Merging) return;
        var originalSyncStatus = mandateModel.SyncStatus;
        mandateModel.SyncStatus = SyncStatus.Merging;
        mergeModal.Hide();
        await Task.Delay(1); // force re-render
        StateHasChanged();

        try
        {
            int farmId = mandateModel.Farm.Id;
            var mandate = await Repository.ReadMandateAsync(farmId);
            Ensure.That(mandate, nameof(mandate)).IsNotNull();
            var checklistsArray = await Task.WhenAll(mandate.Inspections.Select(async x => await Repository.ReadChecklistAsync(x.FarmInspectionId)).ToArray());
            var mergePackage = MergePackage.FromDomain(mandate, checklistsArray);
            string sourceHash = JsonConvert.SerializeObject(mergePackage).ComputeSha256Hash();
            Console.WriteLine("Calling api /merge action...");
            var apiCallResult = await Api.SendMergePackage("merge", mergePackage);
            if (apiCallResult.IsFailure)
            {
                string errorMessage = $"Erreur de renvoi du paquet de données. Motif: {apiCallResult.Error}";
                Console.WriteLine(errorMessage);
                Toast.ShowError(errorMessage, ToastMessages.ErrorHeader);
                return;
            }
            var mergeResult = apiCallResult.Value;
            if (sourceHash != mergeResult.Hash)
            {
                string checksumsDoNotMatchError = $"Erreur de renvoi du paquet de données. Motif: les checksums ne correspondent pas, annulation de l'opération (Id d'opération={mergeResult.Id}).";
                Console.WriteLine(checksumsDoNotMatchError);
                Toast.ShowError(checksumsDoNotMatchError, ToastMessages.ErrorHeader);
                await CancelMerge(mergeResult.Id, MergeStates.InvalidHash);
                mandateModel.SyncStatus = originalSyncStatus;
                return;
            }
            var acknowledgeResult = await Api.AcknowledgeMerge("acknowledgemerge", mergeResult.Id);
            if (acknowledgeResult.IsFailure)
            {
                string acknowledgeError = $"Erreur serveur lors de la confirmation, annulation de l'opération (Id d'opération={mergeResult.Id}). Merci de contacter le support.";
                Console.WriteLine(acknowledgeError);
                Toast.ShowError(acknowledgeError, ToastMessages.ErrorHeader);
                await CancelMerge(mergeResult.Id, MergeStates.CancelledDueToUnknownAckowledgeError);
                mandateModel.SyncStatus = originalSyncStatus;
                return;
            }
            Console.WriteLine("... merge action succesful");
            await DeleteMandate(mandateModel);
            Toast.Success();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToLogErrorMessage());
            Toast.Error(e.ToUserErrorMessage());
            mandateModel.SyncStatus = originalSyncStatus;
        }
    }

    private async Task<bool> CancelMerge(int mergeResultId, string mergeState)
    {
        Console.WriteLine("Cancelling merge package...");
        var cancelResult = await Api.CancelMergePackage("cancelmerge", mergeResultId, mergeState);
        if (cancelResult.IsFailure)
        {
            string cancelError = $"Erreur inconnue lors de l'annulation (Id d'opération={mergeResultId}), merci de contacter le support.";
            Console.WriteLine(cancelError);
            Toast.ShowError(cancelError, ToastMessages.ErrorHeader);
            return false;
        }

        Console.WriteLine($"Successfully cancelled merge Id={mergeResultId}.");
        Toast.ShowSuccess($"Opération annulée avec succès (Id d'opération={mergeResultId}).", ToastMessages.SuccessHeader);
        return true;
    }

    async ValueTask<Result<T>> FetchThenSave<T>(Func<Task<Result<T>>> fetchFunc, Func<T, ValueTask> saveFunc)
    {
        var result = await fetchFunc();
        if (result.IsFailure)
        {
            Console.WriteLine(result.ToLogErrorMessage());
            Toast.Error(result.ToUserErrorMessage());
            return result;
        }

        var data = result.Value;
        await saveFunc(data);
        return result;
    }

    async Task TryFetchMandatesAndSave()
    {
        loading = true;
        await Task.Delay(1);
        StateHasChanged();

        try
        {
            var auth = await AuthService.ReadAuthInfo();
            var inspectorInfoResult = await Api.FetchInspectorNameAsync($"inspectors/{auth.Username.Replace(".", "thispointshouldbeerased")}");
            if (inspectorInfoResult.IsSuccess)
            {
                await Repository.SaveInspectorNameAsync(inspectorInfoResult.Value);
            }
            else
            {
                Console.WriteLine(inspectorInfoResult.ToLogErrorMessage());
                Toast.Error(inspectorInfoResult.ToUserErrorMessage());
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToLogErrorMessage());
            Toast.Error(e.ToUserErrorMessage());
        }
        finally
        {
            loading = false;
        }

        try
        {
            DateTime started = DateTime.Now;
            Console.WriteLine($"Reading mandates from api (started {started.ToDetailedTime()})...");
            var mandatesResult = await Api.FetchAllMandatesAsync("mandates");
            TimeSpan elapsed = DateTime.Now - started;
            Console.WriteLine($"Mandates read succesfully (elasped {elapsed}).");
            if (mandatesResult.IsSuccess)
            {
                await Repository.SaveMandatesAsync(mandatesResult.Value);
            }
            else
            {
                Console.WriteLine(mandatesResult.ToLogErrorMessage());
                Toast.Error(mandatesResult.ToUserErrorMessage());
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToLogErrorMessage());
            Toast.Error(e.ToUserErrorMessage());
        }
        finally
        {
            loading = false;
        }
    }

    async Task SetSyncStatus()
    {
        if (mandates != null)
            foreach (var mandate in mandates)
            {
                bool exists = await Repository.HasMandateAsync(mandate.Farm.Id);
                mandate.SyncStatus = exists ? SyncStatus.Loaded : SyncStatus.Unavailable;
            }
    }

    private async Task PopulateFilters()
    {
        filter.DomainsDS = new List<SortListItem>();
        foreach (var mandate in mandatesBKFilter)
        {
            foreach (var inspection in mandate.Inspections)
            {
                if (filter.DomainsDS.All(x => x.Name != inspection.Domain))
                {
                    filter.DomainsDS.Add(new SortListItem()
                    {
                        Icon = "",
                        Id = inspection.Domain,
                        IsAscending = true,
                        Name = inspection.Domain
                    });
                }
            }
        }
        filter.DomainsDS = filter.DomainsDS.OrderBy(x => x.Name).ToList();

        filter.InspectorsDS = new List<SortListItem>();
        foreach (var mandate in mandatesBKFilter)
        {
            foreach (var inspection in mandate.Inspections)
            {
                if (filter.InspectorsDS.All(x => x.Name != inspection.Inspector))
                {
                    filter.InspectorsDS.Add(new SortListItem()
                    {
                        Icon = "",
                        Id = inspection.Inspector,
                        IsAscending = true,
                        Name = inspection.Inspector
                    });
                }
            }
        }
        filter.InspectorsDS = filter.InspectorsDS.OrderBy(x => x.Name).ToList();

        filter.ReasonsDS = new List<SortListItem>();
        foreach (var mandate in mandatesBKFilter)
        {
            foreach (var inspection in mandate.Inspections)
            {
                if (filter.ReasonsDS.All(x => x.Name != inspection.Reason))
                {
                    filter.ReasonsDS.Add(new SortListItem()
                    {
                        Icon = "",
                        Id = inspection.Reason,
                        IsAscending = true,
                        Name = inspection.Reason
                    });
                }
            }
        }
        filter.ReasonsDS = filter.ReasonsDS.OrderBy(x => x.Name).ToList();

        filter.CampaignsDS = new List<SortListItem>();
        foreach (var mandate in mandatesBKFilter)
        {
            foreach (var inspection in mandate.Inspections)
            {
                if (filter.CampaignsDS.All(x => x.Name != inspection.Campaign))
                {
                    filter.CampaignsDS.Add(new SortListItem()
                    {
                        Icon = "",
                        Id = inspection.Campaign,
                        IsAscending = true,
                        Name = inspection.Campaign
                    });
                }
            }
        }
        filter.CampaignsDS = filter.CampaignsDS.OrderBy(x => x.Name).ToList();
    }

    async Task ApplyFilter()
    {
        if (loadingFilter) return;

        string value = JsonConvert.SerializeObject(filter);
        await Js.InvokeVoidAsync("setFilterMandates", value);

        loadingFilter = true;

        mandates = mandatesBKFilter;

        if (!string.IsNullOrEmpty(filter.Ktidb))
        {
            mandates = mandates.Where(x => x.Farm.Ktidb.Contains(filter.Ktidb)).ToArray();
        }

        if (!string.IsNullOrEmpty(filter.FarmName))
        {
            mandates = mandates.Where(x => x.Farm.FarmName.Contains(filter.FarmName, StringComparison.CurrentCultureIgnoreCase)).ToArray();
        }

        if (filter.Domains.Count > 0)
        {
            var domains = filter.Domains.Select(x => x.Id).ToList();
            mandates = mandates.Where(r=> r.Inspections.Any(d => domains.Contains(d.Domain))).ToArray();
        }

        if (filter.Inspectors.Count > 0)
        {
            var inpectors = filter.Inspectors.Select(x => x.Id).ToList();
            mandates = mandates.Where(r => r.Inspections.Any(d => inpectors.Contains(d.Inspector))).ToArray();
        }

        if (filter.Reasons.Count > 0)
        {
            var reasons = filter.Reasons.Select(x => x.Id).ToList();
            mandates = mandates.Where(r => r.Inspections.Any(d => reasons.Contains(d.Reason))).ToArray();
        }

        if (filter.Campaigns.Count > 0)
        {
            var campaigns = filter.Campaigns.Select(x => x.Id).ToList();
            mandates = mandates.Where(r => r.Inspections.Any(d => campaigns.Contains(d.Campaign))).ToArray();
        }

        loadingFilter = false;

        StateHasChanged();
    }

}
