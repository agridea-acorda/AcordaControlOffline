@page "/Checklist2/{FarmInspectionId:int}"
@using Microsoft.AspNetCore.Authorization
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection
@attribute [Authorize]
@using System.IO 
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb.ViewModel

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Récapitulatif</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/MandateDetail/" + farmId)'>
                <i class="fas fa-arrow-left"></i>
                Retour Mandat
            </button>
            <button type="button" class="btn btn-sm btn-success" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/Signatures/" + FarmInspectionId + "?FarmId=" + farmId)'>
                <i class="fas fa-arrow-right"></i>
                Rapport pdf et signatures
            </button>
        </div>
    </div>
    <div class="card-body">
        @if (progressBarModel != null)
        {
            <ProgressBar Progress="@progressBarModel" />
        }
    </div>
</div>

<div class="card">
    <div class="card-header">
        @if (needsSaving)
        {
            <button class="btn btn-primary float-right" @onclick="@Save" disabled=@saving>
                <i class="@(saving ? "fas fa-spinner fa-spin" : "far fa-save")"></i>
                Enregistrer
            </button>
        }
        <h3 class="card-title">Exigences</h3>
    </div>
    <div class="card-body">
        <p>
            <Blazorise.Switch TValue="bool" @bind-Checked="@showAutoSet"><span class="font-weight-normal">Afficher NA/NC auto</span></Blazorise.Switch>
        </p>
        <div id="checklist">
            <div class="list-group">
                <div id="@(parent?.Id)" class="@(parent != null ? "list-group-item" : null)">
                    @if (parent != null)
                    {
                        <a @onclick="@(() => NodeViewChanged(parent?.ParentConjunctElementCode ?? ""))">
                            <i class="fas fa-chevron-right fa-3x float-left rotate right mr-2"></i>
                        </a>
                        <span class="badge badge-outline text-indigo bg-indigo disabled float-right mr-1">@parent.NumPoints</span>
                        <span class="badge badge-outline text-indigo disabled float-right mr-1">@parent.NumGroups</span>
                        <h4 class="list-group-item-heading">@parent.ShortName</h4>
                        <p class="list-group-item-text mb-2">@parent.ConjunctElementCode</p>
                    }
                    <div class="@(parent != null ? "mt-2" : null)">
                        <div class="list-group">
                            @if (children.Any())
                            {
                                @foreach (var child in children.OrderBy(x => x.Sort).ThenBy(x => x.ConjunctElementCode))
                                {
                                    <ChecklistItem Node="@child"
                                                   FarmInspectionId="@FarmInspectionId"
                                                   ShowIfAutoSet="@showAutoSet"
                                                   Files="@files"
                                                   OnNodeViewChanged="@NodeViewChanged"
                                                   OnOutcomeChanged="@NodeOutcomeChanged"
                                                   OnEditing="@NodeEditingAsync"
                                                   OnDeleting="@NodeDeleting"
                                                   OnDisplayingInfo="@NodeDisplayingInfo">
                                    </ChecklistItem>
                                }
                            }
                            else
                            {
                                <ChecklistPlaceholderLoading />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<Blazorise.Modal @ref="@info">
    <Blazorise.ModalBackdrop />
    <Blazorise.ModalContent>
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Aide au contrôle, point @conjunctElementCodeForInfo</Blazorise.ModalTitle>
            <Blazorise.CloseButton Clicked="@HideInfo" />
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <Blazorise.Field>
                <Blazorise.FieldLabel>@infoText</Blazorise.FieldLabel>
            </Blazorise.Field>
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button class="btn btn-default" @onclick="HideInfo">Fermer</button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>

<Blazorise.Modal @ref="@confirmDelete">
    <Blazorise.ModalBackdrop />
    <Blazorise.ModalContent>
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Confirmation</Blazorise.ModalTitle>
            <Blazorise.CloseButton Clicked="@CancelDeleteNode" />
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <Blazorise.Field>
                <Blazorise.FieldLabel>Êtes-vous sûr de vouloir supprimer les information saisies (résultat, remarques, pièces jointes, ...) ?</Blazorise.FieldLabel>
            </Blazorise.Field>
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button class="btn btn-info" @onclick="@DeleteNode">Ok</button>
            <button class="btn btn-default" @onclick="@CancelDeleteNode">Annuler</button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>


<Blazorise.Modal @ref="@edit">
    @if (editModel != null)
    {
        <Blazorise.ModalBackdrop />
        <EditForm Model="@editModel" OnSubmit="@EditNode">
            <Blazorise.ModalContent>
                <Blazorise.ModalHeader>
                    <Blazorise.ModalTitle>Résultat détaillé</Blazorise.ModalTitle>
                    <Blazorise.CloseButton Clicked="() => edit.Hide()" />
                </Blazorise.ModalHeader>
                <Blazorise.ModalBody>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Remarque contrôleur</Blazorise.FieldLabel>
                        <Blazorise.MemoEdit Rows="2" @bind-Text="@editModel.InspectorComment"></Blazorise.MemoEdit>
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Remarque exploitant</Blazorise.FieldLabel>
                        <Blazorise.MemoEdit Rows="2" @bind-Text="@editModel.FarmerComment"></Blazorise.MemoEdit>
                    </Blazorise.Field>
                    <div hidden="@(editModel.HasChildren || editModel.Outcome == InspectionOutcome.Ok)">
                        <Blazorise.Validations StatusChanged="@OnValidationStatusChanged">
                            <Blazorise.Validation Validator="@ValidateDefectDescription">
                                @if (editModel.ComboDefects.Any())
                                {
                                    <Blazorise.Field>
                                        <Blazorise.FieldLabel>Manquement dans la liste</Blazorise.FieldLabel>
                                        <Blazorise.Select TValue="int?" @bind-SelectedValue="@editModel.DefectId">
                                            @foreach (var option in editModel.ComboDefects)
                                            {
                                                <Blazorise.SelectItem Value="@option.Value">@option.Text</Blazorise.SelectItem>
                                            }
                                        </Blazorise.Select>
                                    </Blazorise.Field>
                                }
                                @if (editModel.ComboDefects.Any())
                                {
                                    <Blazorise.FieldLabel>OU Manquement constaté</Blazorise.FieldLabel>
                                }
                                else
                                {
                                    <Blazorise.FieldLabel>Manquement constaté</Blazorise.FieldLabel>
                                }
                                <Blazorise.TextEdit @bind-Text="@editModel.DefectDescription">
                                    <Feedback>
                                        <Blazorise.ValidationError>Le manquement constaté doit soit être choisi dans la liste soit décrit dans le champ textuel (choix exclusif).</Blazorise.ValidationError>
                                    </Feedback>
                                </Blazorise.TextEdit>
                            </Blazorise.Validation>
                        </Blazorise.Validations>
                        <Blazorise.Field>
                            <Blazorise.FieldLabel>Ampleur du manquement (par ex: surface, longueur, nombre d'animaux, ...)</Blazorise.FieldLabel>
                            <Blazorise.NumericEdit TValue="double" @bind-Value="@editModel.DefectSize"></Blazorise.NumericEdit>
                        </Blazorise.Field>
                        <Blazorise.Field>
                            <Blazorise.FieldLabel>Unité</Blazorise.FieldLabel>
                            <Blazorise.TextEdit @bind-Text="@editModel.Unit" list="units" autocomplete="off" FocusIn='() => { editModel.Unit = ""; }'></Blazorise.TextEdit>
                            <datalist id="units">
                                @foreach (var option in sortListItemsDatasource)
                                {
                                    <option>@option.Id</option>
                                }
                            </datalist>
                        </Blazorise.Field>
                        <Blazorise.Field>
                            <Blazorise.FieldLabel>Gravité (uniquement pour l'OPAn et PPr animale)</Blazorise.FieldLabel>
                            <Blazorise.Select TValue="int" @bind-SelectedValue="@editModel.SeriousnessCode">
                                @foreach (var option in editModel.ComboSeriousnesses)
                                {
                                    <Blazorise.SelectItem Value="@option.Value">@option.Text</Blazorise.SelectItem>
                                }
                            </Blazorise.Select>
                        </Blazorise.Field>
                    </div>
                </Blazorise.ModalBody>
                <Blazorise.ModalFooter>
                    <Blazorise.Button Type="Blazorise.ButtonType.Submit" class="btn btn-primary float-left mr-2" disabled="@editIsInvalid">Ok</Blazorise.Button>
                    <Blazorise.Button class="btn btn-default float-left mr-2" @onclick="@CancelEditNode">Annuler</Blazorise.Button>
                </Blazorise.ModalFooter>
            </Blazorise.ModalContent>
        </EditForm>

        <Blazorise.ModalContent>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>Pièces jointes / photos</Blazorise.ModalTitle>
                <Blazorise.CloseButton Clicked="() => edit.Hide()" />
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                <Blazorise.FieldLabel>Pièces jointes</Blazorise.FieldLabel>
                <Blazorise.FileEdit @ref="@fileEdit" AutoReset="false" Multiple="true" Changed="@OnChangedFile" LocalizationText="My custom browse button"/>
                <br />
                @if (loadingFiles)
                {
                    <i class="far fa-file"></i>
                    <i class="fas fa-spinner fa-spin"></i>
                }
                @foreach (var file in filesVms.Where(x => !x.IsPicture))
                {
                    <a @onclick="() => DownloadFile(file.Id)"><i class="far fa-file"></i> @file.FileName</a>
                    <br />
                }
                <br />
                <Blazorise.FieldLabel>Photos</Blazorise.FieldLabel>
                <Blazorise.FileEdit @ref="@pictureEdit" AutoReset="false" Multiple="true" Changed="@OnChangedPicture" />
                <br />
                @if (loadingFiles)
                {
                    <i class="far fa-file"></i>
                    <i class="fas fa-spinner fa-spin"></i>
                }
                @foreach (var file in filesVms.Where(x => x.IsPicture))
                {
                    <a @onclick="() => DownloadFile(file.Id)"><i class="far fa-file"></i> @file.FileName</a>
                    <br />
                }
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button class="btn btn-primary float-left mr-2" @onclick="() => edit.Hide()">Ok</Blazorise.Button>
                <Blazorise.Button class="btn btn-default float-left mr-2" @onclick="() => edit.Hide()">Annuler</Blazorise.Button>
            </Blazorise.ModalFooter>
        </Blazorise.ModalContent>
 
    }
</Blazorise.Modal>

@code{
    Blazorise.FileEdit fileEdit;
    Blazorise.FileEdit pictureEdit;
    List<FileChecklist> files = new List<FileChecklist>();
    IEnumerable<FileChecklistVm> filesVms = new List<FileChecklistVm>();
    bool loadingFiles = true;

    async Task OnChangedFile(Blazorise.FileChangedEventArgs e)
    {
        loadingFiles = true;
        filesVms = new List<FileChecklistVm>();
        StateHasChanged();
        try
        {
            foreach (var file in e.Files)
            {
                // A stream is going to be the destination stream we're writing to.                
                using (var stream = new MemoryStream())
                {
                    // Here we're telling the FileEdit where to write the upload result
                    await file.WriteToStreamAsync(stream);

                    // Once we reach this line it means the file is fully uploaded.
                    // In this case we're going to offset to the beginning of file
                    // so we can read it.
                    stream.Seek(0, SeekOrigin.Begin);

                    files.Add(new FileChecklist()
                    {
                        FileName = file.Name,
                        FileType = file.Type,
                        FileSize = file.Size,
                        FileData = stream.ToArray(),
                        IsPicture = false
                    });
                    Console.WriteLine("Adding file");
                }
            }
            Console.WriteLine("Files : " + files.Count);
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            StateHasChanged();
        }
        //var text = string.Join(",", e.Files.Select(f => f.Name));
        await Js.InvokeAsync<string>("setFileInputLabel", new object?[] { fileEdit.ElementId, "" });

        await AddFileNode(false);
        await UpdateFiles();
    }

    async Task OnChangedPicture(Blazorise.FileChangedEventArgs e)
    {
        loadingFiles = true;
        filesVms = new List<FileChecklistVm>();
        StateHasChanged();
        try
        {
            foreach (var file in e.Files)
            {
                // A stream is going to be the destination stream we're writing to.                
                using (var stream = new MemoryStream())
                {
                    // Here we're telling the FileEdit where to write the upload result
                    await file.WriteToStreamAsync(stream);

                    // Once we reach this line it means the file is fully uploaded.
                    // In this case we're going to offset to the beginning of file
                    // so we can read it.
                    stream.Seek(0, SeekOrigin.Begin);

                    files.Add(new FileChecklist()
                    {
                        FileName = file.Name,
                        FileType = file.Type,
                        FileSize = file.Size,
                        FileData = stream.ToArray(),
                        IsPicture = false
                    });
                    Console.WriteLine("Adding file");
                }
            }
            Console.WriteLine("Files : " + files.Count);
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            StateHasChanged();
        }
        //var text = string.Join(",", e.Files.Select(f => f.Name));
        await Js.InvokeAsync<string>("setFileInputLabel", new object?[] { pictureEdit.ElementId, "" });

        await AddFileNode(true);
        await UpdateFiles();
    }

    private async Task UpdateFiles()
    {
        loadingFiles = true;
        StateHasChanged();
        if (files == null || files.Count == 0)
        {
            using (var db = await this.DbFactory.Create<Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb.ChecklistDb>())
            {
                filesVms = db.FileChecklists
                                .Where(x => x.ConjunctElementCode == conjunctElementCodeToEdit && x.FarmInspectionId == FarmInspectionId)
                                .Select(x => new FileChecklistVm()
                                {
                                    Id = x.Id,
                                    FileName = x.FileName,
                                    IsPicture = x.IsPicture
                                });
            }
        }
        else
        {
            filesVms = files
                .Where(x => x.ConjunctElementCode == conjunctElementCodeToEdit && x.FarmInspectionId == FarmInspectionId)
                .Select(x => new FileChecklistVm()
                {
                    Id = x.Id,
                    FileName = x.FileName,
                    IsPicture = x.IsPicture
                });
        }

        loadingFiles = false;
        StateHasChanged();
    }

    async Task DownloadFile(int id)
    {
        Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb.FileChecklist fileChecklist;
        using (var db = await this.DbFactory.Create<Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb.ChecklistDb>())
        {
            fileChecklist = db.FileChecklists
                        .Where(x => x.Id == id)
                        .SingleOrDefault();

        }
        if (fileChecklist != null)
        {
            await Js.InvokeVoidAsync(
              "downloadFromByteArray", new object?[] { fileChecklist.FileData, fileChecklist.FileName, fileChecklist.FileType });
        }
    }

    async Task AddFileNode(bool isPicture)
    {
        Console.WriteLine($"Adding file(s) for node {conjunctElementCodeToEdit}...");

        using (var db = await this.DbFactory.Create<Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb.ChecklistDb>())
        {
            var filesDelete = db.FileChecklists
                                .Where(x => x.ConjunctElementCode == conjunctElementCodeToEdit && x.FarmInspectionId == FarmInspectionId && x.IsPicture == isPicture)
                                .ToList();
            foreach (var item in filesDelete)
            {
                db.FileChecklists.Remove(item);
                Console.WriteLine($"File {item.Id} deleted in IndexedDB");
            }
            await db.SaveChanges();
        }

        using (var db = await this.DbFactory.Create<Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.IndexedDb.ChecklistDb>())
        {
            Console.WriteLine($"Files saved in IndexedDB : {files.Count}");
            foreach (var file in files)
            {
                file.ConjunctElementCode = conjunctElementCodeToEdit;
                file.FarmInspectionId = FarmInspectionId;
                file.IsPicture = isPicture;
                file.CreatedAt = DateTime.Now;

                db.FileChecklists.Add(file);

                Console.WriteLine($"New file saved in IndexedDB");
            }
            await db.SaveChanges();
            files = new List<AcordaControlOffline.Shared.ApplicationServices.IndexedDb.FileChecklist>();
        }

        await Js.InvokeAsync<string>("setFileInputLabel", new object?[] { fileEdit.ElementId, "" });
        StateHasChanged();
    }
}