@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Farm
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection
@using Mandate = Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.MandateDetail.Mandate
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Pdf
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Pdf.Model
@using Ardalis.GuardClauses
@using Microsoft.AspNetCore.Authorization
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.Config

@page "/MandateDetail/{FarmId:int}"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IRepository Repository
@inject IJSRuntime Js
@inject AppConfiguration Config

@if (mandateViewModel?.Farm != null)
{
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">@mandateViewModel.Farm.Ktidb @mandateViewModel.Farm.FarmName</h3>
            <div class="card-tools">
                <button type="button" class="btn btn-default" @onclick="() => NavigateToFarmDetail(mandateViewModel.Farm.Id)">
                    <span class="fa-stack stacked-icon-button">
                        <i class="far fa-circle fa-stack-2x"></i>
                        <i class="fas fa-info fa-stack-1x"></i>
                    </span> Consulter
                </button>
            </div>
            <p class="clearboth mb-0">
                <FarmBase Farm="@mandateViewModel.Farm" />
            </p>
        </div>
        @*<div class="card-body">
                <p class="mb-1">
                    <label class="badge-label">SAU:</label> <span class="badge badge-round badge-info text-white p-1 mr-3">@mandateViewModel.Farm.AgriculturalArea</span>
                    <label class="badge-label">non SAU:</label> <span class="badge badge-round badge-info text-white p-1 mr-3">@mandateViewModel.Farm.NonAgriculturalArea</span>
                    <label class="badge-label">UGB:</label> <span class="badge badge-round bg-animal text-white p-1 mr-3">@mandateViewModel.Farm.BovineStandardUnits</span>
                    <label class="badge-label">dont BDTA:</label> <span class="badge badge-round bg-animal text-white p-1 mr-3">@mandateViewModel.Farm.BovineStandardUnitsFromBdta</span>
                </p>
                <BadgeBar Badges="@mandateViewModel.Farm.Badges" />
            </div>*@
    </div>
}
else
{
    <div class="card">
        <div class="ph-item">
            <div class="ph-col-12">
                <div class="ph-picture"></div>
                <div class="ph-row">
                    <div class="ph-col-8 big"></div>
                    <div class="ph-col-4 empty big"></div>
                    <div class="ph-col-8 big"></div>
                    <div class="ph-col-4 empty big"></div>
                </div>
            </div>
        </div>
    </div>
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Check-listes</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/MandateList")'>
                <i class="fas fa-arrow-left"></i> Retour à la liste des mandats
            </button>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="list-group">
            @if (mandateViewModel?.Inspections != null)
            {
                @foreach (var (inspection, index) in mandateViewModel.Inspections.WithIndex())
                {
                    <div class="list-group-item">
                        <button type="button" class="btn btn-success btn-sm float-right" @onclick="() => NavigateToChecklist(inspection.FarmInspectionId, FarmId)">
                            <i class="fas fa-arrow-right"></i> Check-Liste
                        </button>
                        <h4 class="list-group-item-heading">@inspection.Domain</h4>
                        <p class="list-group-item-text">
                            <span class="badge bg-purple mr-1"><i class="far fa-folder-open"></i> @inspection.Campaign</span>
                            <span class="badge bg-purple mr-1"><i class="fas fa-question"></i> @inspection.Reason</span>
                        </p>
                        <Blazorise.Button class="btn-app h-auto ml-0 mr-2" Clicked="() => ShowAppointmentModal(index)">
                            <i class="far fa-calendar-alt"></i>
                            <span class="d-block">@inspection.VisitDate</span>
                            @if (!string.IsNullOrWhiteSpace(inspection.AppointmentDate))
                            {
                                <span class="d-block">@inspection.AppointmentDate</span>
                            }
                            @if (inspection.IsUnexpected)
                            {
                                <span class="text-red d-block"><i class="fas fa-exclamation"></i> @InspectionMode.Unscheduled.Text</span>
                            }
                        </Blazorise.Button>
                        <Blazorise.Button class="btn-app h-auto ml-0 mr-2" Clicked="() => ShowCommentForOfficeModal(index)">
                            <i class="far fa-comment-dots @(!string.IsNullOrWhiteSpace(inspection.CommentForOffice) ? "text-warning" : "")"></i>
                            <span style="white-space: pre-wrap">Remarque pour gérance</span>
                        </Blazorise.Button>
                        @{ string complianceButtonColor = inspection.HasComplianceRequirements ? "text-danger" : ""; }
                        <button class="btn btn-app h-auto ml-0 mr-2 @complianceButtonColor" @onclick="() => ShowComplianceModal(index)">
                            <i class="far fa-copy"></i>Suivi documents
                        </button>
                        <ProgressBar Progress="@inspection" />
                        @if (inspection.HasComplianceRequirements)
                        {
                            <p class="mb-1">
                                <strong class="mr-3">Délai de mise en conformité jusqu'au: @inspection.ComplianceDeadline</strong>
                                @if (inspection.IsPastDeadline)
                                {
                                    <span class="text-yellow mr-3"> @PastDeadlineMessage</span>
                                }
                                @if (inspection.DueDateRespected)
                                {
                                    <span class="text-green mr-3"><i class="far fa-thumbs-up"></i> @DueDateRespectedMessage</span>
                                }
                                @if (inspection.IsLateOrNotCompliant)
                                {
                                    <span class="text-red mr-3"><i class="far fa-thumbs-down"></i> @LateOrNotCompliant</span>
                                }
                            </p>
                        }
                        @if (inspection.CanGeneratePdfReport)
                        {
                            <button @onclick="() => SavePdfReport(inspection.FarmInspectionId)" disabled=@savingPdf class="btn btn-primary mr-1 mb-1">
                                <i class="@(savingPdf ? "fas fa-spinner fa-spin" : "far fa-save")"></i>
                                Enregistrer le rapport de contrôle
                            </button>
                        }
                        @if (inspection.CanDisplayPdfReport)
                        {
                            <button @onclick="() => DisplayPdfReport(inspection.FarmInspectionId)" disabled=@displayingPdf class="btn btn-primary mr-1 mb-1">
                                <i class="@(displayingPdf ? "fas fa-spinner fa-spin" : "far fa-file-pdf") "></i> 
                                Consulter le rapport de contrôle
                            </button>
                        }
                        @if (inspection.CanClose)
                        {
                            <button disabled="disabled" class="btn btn-primary mr-1 mb-1"><i class="fas fa-lock"></i> Clôturer</button>
                        }
                        @if (inspection.IsClosed)
                        {
                            <p class="mb-1"><strong>Clôturé le @inspection.CloseDate par @inspection.ClosedBy.</strong></p>
                        }
                        @if (inspection.CanReopen)
                        {
                            <button disabled="disabled" class="btn btn-primary mr-1 mb-1"><i class="fas fa-lock-open"></i> Rouvrir</button>
                        }
                    </div>
                }
            }
            else
            {
                @for (int i = 0; i < 5; i++)
                {
                    <div class="ph-item">
                        <div class="ph-col-12">
                            <div class="ph-row">
                                <div class="ph-col-6 big"></div>
                                <div class="ph-col-6 empty big"></div>
                                <div class="ph-col-4"></div>
                                <div class="ph-col-8 empty"></div>
                                <div class="ph-col-4"></div>
                                <div class="ph-col-8 empty"></div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>


@if (appointment != null)
{
    <Blazorise.Modal @ref="appointmentModal">
        <Blazorise.ModalBackdrop />
        <EditForm Model="appointment" OnSubmit="@SaveAppointementDetails">
            <Blazorise.ModalContent IsCentered="true">
                <Blazorise.ModalHeader>
                    <Blazorise.ModalTitle>Prendre rendez-vous avec l'exploitant</Blazorise.ModalTitle>
                    <Blazorise.CloseButton Clicked="() => appointmentModal.Hide()" />
                </Blazorise.ModalHeader>
                <Blazorise.ModalBody>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Téléphone</Blazorise.FieldLabel>
                        <Blazorise.TextEdit ReadOnly @bind-Text="@appointment.Phone" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Courriel</Blazorise.FieldLabel>
                        <Blazorise.TextEdit ReadOnly @bind-Text="@appointment.Email" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Date de premier contact</Blazorise.FieldLabel>
                        <Blazorise.DateEdit TValue="DateTime?" @bind-Date="@appointment.FirstContactDate" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Date de rendez-vous</Blazorise.FieldLabel>
                        <Blazorise.DateEdit TValue="DateTime?" @bind-Date="@appointment.Date" />
                    </Blazorise.Field>
                </Blazorise.ModalBody>
                <Blazorise.ModalFooter>
                    <Blazorise.Button Type="Blazorise.ButtonType.Submit" class="btn btn-primary float-left mr-2" disabled=@savingAppointment>
                        <i class="@(savingAppointment ? "fas fa-spinner fa-spin" : "far fa-save")"></i> Enregistrer
                    </Blazorise.Button>
                    <Blazorise.Button class="btn btn-default float-left mr-2" Clicked="() => appointmentModal.Hide()">Annuler</Blazorise.Button>
                </Blazorise.ModalFooter>
            </Blazorise.ModalContent>
        </EditForm>
    </Blazorise.Modal>
}

@if (commentForOffice != null)
{
    <Blazorise.Modal @ref="commentForOfficeModal">
        <Blazorise.ModalBackdrop />
        <EditForm Model="commentForOffice" OnSubmit="@SaveCommentForOffice">
            <Blazorise.ModalContent IsCentered="true">
                <Blazorise.ModalHeader>
                    <Blazorise.ModalTitle>Commentaires et détails à l'attention de la gérance</Blazorise.ModalTitle>
                    <Blazorise.CloseButton Clicked="() => commentForOfficeModal.Hide()" />
                </Blazorise.ModalHeader>
                <Blazorise.ModalBody>
                    <Blazorise.Field>
                        <Blazorise.MemoEdit Rows="5" @bind-Text="@commentForOffice.CommentForOffice" />
                    </Blazorise.Field>
                </Blazorise.ModalBody>
                <Blazorise.ModalFooter>
                    <Blazorise.Button Type="Blazorise.ButtonType.Submit" class="btn btn-primary float-left mr-2" disabled=@savingCommentForOffice>
                        <i class="@(savingCommentForOffice ? "fas fa-spinner fa-spin" : "far fa-save")"></i> Enregistrer
                    </Blazorise.Button>
                    <Blazorise.Button class="btn btn-default float-left mr-2" Clicked="() => commentForOfficeModal.Hide()">Annuler</Blazorise.Button>
                </Blazorise.ModalFooter>
            </Blazorise.ModalContent>
        </EditForm>
    </Blazorise.Modal>
}

@if (compliance != null)
{
    <Blazorise.Modal @ref="complianceModal">
        <Blazorise.ModalBackdrop />
        <EditForm Model="compliance" OnSubmit="@SaveCompliance">
            <Blazorise.ModalContent IsCentered="true">
                <Blazorise.ModalHeader>
                    <Blazorise.ModalTitle>Suivi documents et délai</Blazorise.ModalTitle>
                    <Blazorise.CloseButton Clicked="() => complianceModal.Hide()" />
                </Blazorise.ModalHeader>
                <Blazorise.ModalBody>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Documents à livrer / Mesures à prendre</Blazorise.FieldLabel>
                        <Blazorise.MemoEdit Rows="3" @bind-Text="@compliance.ActionsOrDocuments" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Délai de mise en conformité</Blazorise.FieldLabel>
                        <Blazorise.DateEdit TValue="DateTime?" @bind-date="@compliance.DueDate"></Blazorise.DateEdit>
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Délai respecté, documents livrés complets et conformes</Blazorise.FieldLabel>
                        <Blazorise.Switch TValue="bool" @bind-Checked="@compliance.DueDateRespected" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Délai pas respecté</Blazorise.FieldLabel>
                        <Blazorise.Switch TValue="bool" @bind-Checked="@compliance.DueDateNotRespected" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Documents livrés incomplets ou non-conformes</Blazorise.FieldLabel>
                        <Blazorise.Switch TValue="bool" @bind-Checked="@compliance.IncompleteOrNonCompliant" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Vérification supplémentaire à effectuer par la gérance (voir remarques contrôle)</Blazorise.FieldLabel>
                        <Blazorise.Switch TValue="bool" @bind-Checked="@compliance.FurtherInvestigationNeeded" />
                    </Blazorise.Field>
                </Blazorise.ModalBody>
                <Blazorise.ModalFooter>
                    <Blazorise.Button Type="Blazorise.ButtonType.Submit" class="btn btn-primary float-left mr-2" disabled=@savingCompliance>
                        <i class="@(savingCompliance ? "fas fa-spinner fa-spin" : "far fa-save")"></i> Enregistrer
                    </Blazorise.Button>
                    <Blazorise.Button class="btn btn-default float-left mr-2" @onclick="() => complianceModal.Hide()">Annuler</Blazorise.Button>
                </Blazorise.ModalFooter>
            </Blazorise.ModalContent>
        </EditForm>
    </Blazorise.Modal>
}

@code {
    public const string LateOrNotCompliant = "Hors délai ou non conforme";
    public const string PastDeadlineMessage = "!! expiré !!";
    public const string DueDateRespectedMessage = "Délai respecté";

    [Parameter] public int FarmId { get; set; }

    private Mandate mandateViewModel;
    private Farm farm;
    private AcordaControlOffline.Shared.Domain.Mandate.Mandate mandate;
    private Blazorise.Modal appointmentModal;
    private AppointmentModel appointment;
    bool savingAppointment;
    private Blazorise.Modal commentForOfficeModal;
    private CommentForOfficeModel commentForOffice;
    bool savingCommentForOffice;
    private Blazorise.Modal complianceModal;
    private ComplianceModel compliance;
    bool savingCompliance;
    bool savingPdf;
    bool displayingPdf;

    protected override async Task OnInitializedAsync()
    {
        DateTime started = DateTime.Now;
        Console.WriteLine($"Reading farm and mandate data (started {started.ToDetailedTime()})...");
        await Task.Delay(1);
        farm = await Repository.ReadFarmAsync(FarmId);
        mandate = await Repository.ReadMandateAsync(FarmId);
        TimeSpan elapsed = DateTime.Now - started;
        Console.WriteLine($"Farm and mandate data read succesfully (elapsed {elapsed}).");
        mandateViewModel = Mandate.FromDomain(farm, mandate);
        appointment = AppointmentModel.FromDomain(farm, mandate.Inspections.First());
        commentForOffice = CommentForOfficeModel.FromDomain(mandate.Inspections.First());
        compliance = ComplianceModel.FromDomain(mandate.Inspections.First());
    }

    private void NavigateToChecklist(int farmInspectionId, int farmId)
    {
        if (farmInspectionId > 0 && farmId > 0)
        {
            Navigation.NavigateTo($"{Config.BaseUrl}/Checklist2/{farmInspectionId}?FarmId={farmId}");
        }
    }

    private void NavigateToFarmDetail(int farmId)
    {
        if (farmId > 0)
        {
            Navigation.NavigateTo($"{Config.BaseUrl}/FarmDetail/{farmId}");
        }
    }

    private void ShowAppointmentModal(int index)
    {
        appointment = AppointmentModel.FromDomain(farm, mandate.Inspections[index], index);
        appointmentModal.Show();
    }

    async void SaveAppointementDetails()
    {
        if (savingAppointment) return;
        savingAppointment = true;
        await Task.Delay(1);
        StateHasChanged();
        try
        {
            mandate.Inspections[appointment.InspectionIndex].SetAppointment(new Appointment(appointment.Date, appointment.FirstContactDate));
            mandateViewModel = Mandate.FromDomain(farm, mandate);
            await Repository.SaveMandateAsync(mandate, FarmId);
            appointmentModal.Hide();
        }
        finally
        {
            savingAppointment = false;
            StateHasChanged();
        }
    }

    private void ShowCommentForOfficeModal(int index)
    {
        commentForOffice = CommentForOfficeModel.FromDomain(mandate.Inspections[index], index);
        commentForOfficeModal.Show();
    }

    async void SaveCommentForOffice()
    {
        if (savingCommentForOffice) return;
        savingCommentForOffice = true;
        await Task.Delay(1);
        StateHasChanged();
        try
        {
            mandate.Inspections[commentForOffice.InspectionIndex].SetCommentForOffice(commentForOffice.CommentForOffice);
            mandateViewModel = Mandate.FromDomain(farm, mandate);
            await Repository.SaveMandateAsync(mandate, FarmId);
            commentForOfficeModal.Hide();
        }
        finally
        {
            savingCommentForOffice = false;
            StateHasChanged();
        }
    }

    private void ShowComplianceModal(int index)
    {
        compliance = ComplianceModel.FromDomain(mandate.Inspections[index], index);
        complianceModal.Show();
    }

    async void SaveCompliance()
    {
        if (savingCompliance) return;
        savingCompliance = true;
        await Task.Delay(1);
        StateHasChanged();
        try
        {
            mandate.Inspections[compliance.InspectionIndex].SetCompliance(new Compliance(compliance.ActionsOrDocuments, 
                                                                                         compliance.DueDate, 
                                                                                         compliance.DueDateNotRespected, 
                                                                                         compliance.DueDateRespected, 
                                                                                         compliance.FurtherInvestigationNeeded, 
                                                                                         compliance.IncompleteOrNonCompliant));
            mandateViewModel = Mandate.FromDomain(farm, mandate);
            await Repository.SaveMandateAsync(mandate, FarmId);
            complianceModal.Hide();
        }
        finally
        {
            savingCompliance = false;
            StateHasChanged();
        }
    }

    async Task SavePdfReport(int farmInspectionId)
    {
        if (savingPdf) return;
        savingPdf = true;
        await Task.Delay(1);
        StateHasChanged();

        try
        {
            Console.WriteLine($"Saving pdf report for inspection {farmInspectionId}...");
            var inspection = mandate.Inspections.FirstOrDefault(x => x.FarmInspectionId == farmInspectionId);
            var checklist = await Repository.ReadChecklistAsync(farmInspectionId);
            Guard.Against.Null(inspection, nameof(inspection));
            string cantonCode = "NE"; //todo get from authorization system
            string userName = "johnny-b-goode"; // todo get from authorization system
            string logoPath = "img/focaa.png";
            var pdf = new InspectionPdf(InspectionPdfModel.FromDomain(inspection,
                                                                      farm,
                                                                      checklist,
                                                                      cantonCode,
                                                                      logoPath), userName);
            inspection.SetPdfReport(new PdfReport(pdf.CreatePdf()));
            mandateViewModel = Mandate.FromDomain(farm, mandate);
            await Repository.SaveMandateAsync(mandate, FarmId);
            Console.WriteLine("... pdf report succesfully saved.");

        }
        finally
        {
            savingPdf = false;
            StateHasChanged();
        }
    }

    async void DisplayPdfReport(int farmInspectionId)
    {
        if (displayingPdf) return;
        displayingPdf = true;
        await Task.Delay(1);
        StateHasChanged();

        try
        {
            var inspection = mandate.Inspections.FirstOrDefault(x => x.FarmInspectionId == farmInspectionId);
            Guard.Against.Null(inspection, nameof(inspection));
            var bytes = inspection.PdfReport.Bytes;
            string filename = InspectionPdf.Filename(2021, farm.Ktidb, farm.FarmName, inspection.Domain.ShortName);
            await Js.InvokeVoidAsync("BlazorDownloadFile", filename, "application/octet-stream", bytes);
        }
        finally
        {
            displayingPdf = false;
            StateHasChanged();
        }
    }

    public class ComplianceModel
    {
        public int InspectionIndex { get; set; }
        public string ActionsOrDocuments { get; set; }
        public DateTime? DueDate { get; set; }
        public bool DueDateNotRespected { get; set; }
        public bool DueDateRespected { get; set; }
        public bool FurtherInvestigationNeeded { get; set; }
        public bool IncompleteOrNonCompliant { get; set; }

        public static ComplianceModel FromDomain(Inspection inspection, int index = 0)
        {
            return new ComplianceModel
            {
                InspectionIndex = index,
                ActionsOrDocuments = inspection.Compliance.ActionsOrDocuments,
                DueDate = inspection.Compliance.DueDate,
                DueDateRespected = inspection.Compliance.DueDateRespected,
                DueDateNotRespected = inspection.Compliance.DueDateNotRespected,
                FurtherInvestigationNeeded = inspection.Compliance.FurtherInvestigationNeeded,
                IncompleteOrNonCompliant = inspection.Compliance.IncompleteOrNonCompliant
            };
        }
    }

    public class CommentForOfficeModel
    {
        public int InspectionIndex { get; set; }
        public string CommentForOffice { get; set; }

        public static CommentForOfficeModel FromDomain(Inspection inspection, int index = 0)
        {
            return new CommentForOfficeModel
            {
                InspectionIndex = index,
                CommentForOffice = inspection.CommentForOffice
            };
        }
    }

    public class AppointmentModel
    {
        public int InspectionIndex { get; set; }
        public DateTime? Date { get; set; }
        public DateTime? FirstContactDate { get; set; }
        public int Mode { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }

        public static AppointmentModel FromDomain(Farm farm, Inspection inspection, int index = 0)
        {
            return new AppointmentModel
            {
                InspectionIndex = index,
                Email = farm.Email,
                Date = inspection.Appointment.Date,
                FirstContactDate = inspection.Appointment.FirstContactDate,
                Mode = inspection.Appointment.Mode.Value,
                Phone = farm.PhoneNumber,
            };
        }
    }
}